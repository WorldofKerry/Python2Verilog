Search.setIndex({"docnames": ["index", "python2verilog", "python2verilog.backend", "python2verilog.backend.verilog", "python2verilog.frontend", "python2verilog.ir", "python2verilog.optimizer", "python2verilog.utils"], "filenames": ["index.rst", "python2verilog.rst", "python2verilog.backend.rst", "python2verilog.backend.verilog.rst", "python2verilog.frontend.rst", "python2verilog.ir.rst", "python2verilog.optimizer.rst", "python2verilog.utils.rst"], "titles": ["Welcome to python2verilog\u2019s documentation!", "python2verilog package", "python2verilog.backend package", "python2verilog.backend.verilog package", "python2verilog.frontend package", "python2verilog.ir package", "python2verilog.optimizer package", "python2verilog.utils package"], "terms": {"packag": 0, "subpackag": 0, "backend": [0, 1], "modul": 0, "frontend": [0, 1], "submodul": [0, 2], "generator2graph": [0, 1], "generator_pars": [0, 1], "ir": [0, 1, 3, 4, 6], "context": [0, 1, 3, 4], "express": [0, 1, 2, 3, 6], "graph": [0, 1, 3, 4], "statement": [0, 1, 2, 3, 6], "optim": [0, 1, 5], "basic": [0, 1, 5], "util": [0, 1], "assert": [0, 1], "string": [0, 1, 3, 5], "convert": [0, 3, 7], "convert_graph": [0, 1], "convert_list": [0, 1], "index": [0, 6], "search": 0, "page": 0, "verilog": [1, 2, 4, 5], "ast": [1, 2, 4], "codegen": [1, 2], "result": [1, 4], "root": [1, 3, 4, 6], "generator2list": [1, 4], "generate_verilog": [1, 4], "get_context": [1, 4], "get_result": [1, 4], "get_root": [1, 4], "wow_count": [1, 4], "is_declar": [1, 5], "to_str": [1, 2, 3, 5, 7], "add": [1, 5, 7], "binop": [1, 5], "left": [1, 5], "right": [1, 5], "div": [1, 5], "int": [1, 3, 4, 5, 6, 7], "lessthan": [1, 5], "mul": [1, 5], "state": [1, 5, 6], "sub": [1, 5], "var": [1, 5, 6], "assignnod": [1, 5, 6], "lvalu": [1, 3, 5, 6], "rvalu": [1, 3, 5, 6], "basicel": [1, 5], "child": [1, 5], "get_all_children": [1, 5], "get_optimal_children": [1, 5], "optimal_child": [1, 5], "clockededg": [1, 5], "donenod": [1, 5], "edg": [1, 3, 5], "get_nam": [1, 5], "element": [1, 3, 5, 6], "children": [1, 5], "name": [1, 3, 5, 6], "unique_id": [1, 5], "ifelsenod": [1, 5], "condit": [1, 3, 5], "false_edg": [1, 5], "optimal_false_edg": [1, 5], "optimal_true_edg": [1, 5], "true_edg": [1, 5], "nonclockededg": [1, 5], "vertex": [1, 3, 5], "yieldnod": [1, 5], "stmt": [1, 5, 6], "create_cytoscape_el": [1, 5], "create_networkx_adjacency_list": [1, 5], "blockingsubsitut": [1, 2, 3, 5], "case": [1, 2, 3, 5, 6], "append_end_stat": [1, 2, 3, 5], "to_lin": [1, 2, 3, 5, 7], "caseitem": [1, 2, 3, 5], "declar": [1, 2, 3, 5], "ifels": [1, 2, 3, 5], "ifelsewrapp": [1, 5], "nonblockingsubsitut": [1, 2, 3, 5], "statesubsitut": [1, 5], "subsitut": [1, 2, 3, 5, 6], "validsubsitut": [1, 5], "whilewrapp": [1, 5], "is_valid_append_end_stat": [1, 5], "combine_cas": [1, 6], "get_idx_with_state_nam": [1, 6], "get_last_state_sub_nam": [1, 6], "optimize_if": [1, 6], "remove_unreferenced_st": [1, 6], "optimizegraph": [1, 6], "unique_count": [1, 6], "backwards_replac": [1, 6], "graph_apply_map": [1, 6], "graph_update_map": [1, 6], "is_depend": [1, 6], "assert_dict_typ": [1, 7], "assert_list_typ": [1, 7], "assert_typ": [1, 7], "implementstolin": [1, 3, 5, 7], "indent": [1, 4, 7], "indentifi": [1, 7], "indentor": [1, 7], "line": [1, 3, 5, 7], "assert_no_newlin": [1, 7], "concat": [1, 7], "nestifi": [1, 7], "To": [1, 3, 5, 7], "run": 1, "convers": 1, "cli": 1, "script": 1, "func": 1, "functiondef": [1, 4], "optimization_level": 1, "sourc": [1, 3, 4, 5, 6, 7], "wrapper": 1, "python": [1, 4], "common": 1, "2": [1, 5, 7], "alwai": [2, 3, 5], "atnegedg": [2, 3], "atnegedgestat": [2, 3], "atposedg": [2, 3], "atposedgestat": [2, 3], "initi": [2, 3], "instanti": [2, 3], "posedgesyncalwai": [2, 3], "get_blocked_com": [2, 3], "get_inline_com": [2, 3], "while": [2, 3, 5], "casebuild": [2, 3], "do_edg": [2, 3], "do_vertex": [2, 3], "new_caseitem": [2, 3], "from_graph_ir": [2, 3], "from_list_ir": [2, 3], "from_optimal_ir": [2, 3], "get_module_lin": [2, 3], "get_module_str": [2, 3], "graph_build": [2, 3], "graph_build_nod": [2, 3], "list_build_cas": [2, 3], "list_build_case_item": [2, 3], "list_build_expr": [2, 3], "list_build_stmt": [2, 3], "new_testbench": [2, 3], "new_testbench_lin": [2, 3], "new_testbench_str": [2, 3], "abstract": 3, "syntax": [3, 5], "tree": [3, 4], "compon": 3, "class": [3, 4, 5, 6, 7], "trigger": 3, "arg": [3, 5], "bodi": [3, 5], "list": [3, 5, 6, 7], "none": [3, 5, 7], "valid": [3, 5], "str": [3, 5, 6, 7], "kwarg": [3, 5], "base": [3, 4, 5, 6, 7], "begin": [3, 5], "end": [3, 5], "negedg": 3, "posedg": 3, "case_item": [3, 5], "variou": 3, "item": [3, 5, 6], "0": [3, 4, 5, 6, 7], "n": [3, 5], "endcas": [3, 5], "object": [3, 4, 5, 6, 7], "i": [3, 5, 6, 7], "e": [3, 5], "size": [3, 5], "32": [3, 5], "is_reg": [3, 5], "bool": [3, 5], "fals": [3, 5], "is_sign": [3, 5], "reg": [3, 5], "wire": [3, 5], "modifi": [3, 5], "1": [3, 5, 7], "expr": [3, 6], "g": [3, 5], "b": 3, "current": 3, "just": 3, "then_bodi": [3, 5], "else_bodi": [3, 5], "els": [3, 5, 6], "append": [3, 5, 6], "both": [3, 5], "branch": [3, 5], "module_nam": 3, "given_nam": 3, "port_connect": 3, "dict": [3, 5, 6, 7], "instantiationo": 3, "f": 3, "given": [3, 6], "input": 3, "output": [3, 5], "add_default_port": 3, "true": [3, 5], "endmodul": 3, "clock": [3, 5, 6], "liter": [3, 5], "comment": 3, "repres": [3, 5], "block": [3, 5, 6], "If": [3, 5], "us": [3, 5], "directli": [3, 5], "treat": [3, 5], "separ": 3, "newlin": [3, 7], "oper": [3, 5, 6], "interfac": [3, 5, 7], "nonblock": [3, 5], "unsynthesiz": 3, "creat": [3, 5, 7], "process": 3, "node": [3, 5, 6], "new": [3, 7], "": 3, "uniqu": [3, 5], "id": [3, 5], "identifi": 3, "code": 3, "gener": [3, 4], "classmethod": 3, "build": 3, "from": [3, 5], "warn": 3, "being": 3, "depric": 3, "get": [3, 4, 5, 6], "visit": 3, "set": 3, "root_cas": 3, "static": [3, 7], "handl": [3, 5], "properti": [3, 4, 5], "test_cas": 3, "tupl": [3, 4, 7], "testbench": 3, "multipl": 3, "test": 3, "each": [3, 5], "singl": [3, 5], "pars": 4, "function": 4, "intermedi": [4, 5], "represent": [4, 5], "python_func": 4, "return": [4, 5, 6, 7], "surround": 4, "contain": [4, 5], "doe": [4, 5, 6], "most": 4, "work": 4, "call": 4, "other": [4, 5, 7], "parser": 4, "global_var": 5, "input_var": 5, "output_var": 5, "state_var": 5, "need": [5, 7], "variabl": [5, 6], "o": 5, "paramet": 5, "localparam": 5, "check": 5, "ha": 5, "been": 5, "alreadi": 5, "op": 5, "A": [5, 6, 7], "can": [5, 7], "equat": 5, "someth": 5, "valu": [5, 6, 7], "integ": 5, "logic": 5, "convent": 5, "non": 5, "assign": 5, "do": [5, 6], "execut": 5, "next": [5, 6], "without": 5, "cycl": [5, 6], "have": 5, "pass": 5, "otherwis": 5, "signal": 5, "done": 5, "an": [5, 6, 7], "between": 5, "two": [5, 7], "vertic": 5, "yield": 5, "adjac": 5, "assum": 5, "ar": [5, 6, 7], "hdl": 5, "last": [5, 6], "state_nam": [5, 6], "type": [5, 7], "special": 5, "indic": 5, "thi": 5, "local": 5, "varaibl": 5, "more": 5, "than": 5, "one": 5, "cannot": 5, "same": 5, "mai": 5, "overwrit": 5, "continu": 5, "loop": 5, "go": 5, "structur": 5, "where": 5, "first": 5, "encapsul": 5, "todo": 5, "should": 5, "subclass": 5, "ones": 5, "similar": 5, "assembli": 5, "algorithm": 6, "ontop": 6, "look": 6, "combin": 6, "all": [6, 7], "subsequ": 6, "depend": 6, "ani": [6, 7], "prior": 6, "avoid": 6, "wast": 6, "perform": 6, "save": 6, "per": 6, "remov": 6, "unreferenc": 6, "access": 6, "machin": 6, "note": 6, "affect": 6, "threshold": 6, "closur": 6, "map": 6, "replac": 6, "instanc": [6, 7], "old_map": 6, "updat": 6, "whether": 6, "dict_": 7, "key_typ": 7, "value_typ": 7, "kei": 7, "correctli": 7, "list_": 7, "type_": 7, "elem": 7, "obj": 7, "defin": 7, "provid": 7, "method": 7, "data": 7, "serial": 7, "charact": 7, "indent_amount": 7, "amount": 7, "buffer": 7, "pair": 7, "visual": 7, "tool": 7}, "objects": {"": [[1, 0, 0, "-", "python2verilog"]], "python2verilog": [[2, 0, 0, "-", "backend"], [1, 0, 0, "-", "convert"], [4, 0, 0, "-", "frontend"], [5, 0, 0, "-", "ir"], [6, 0, 0, "-", "optimizer"], [7, 0, 0, "-", "utils"]], "python2verilog.backend": [[3, 0, 0, "-", "verilog"]], "python2verilog.backend.verilog": [[3, 0, 0, "-", "ast"], [3, 0, 0, "-", "codegen"]], "python2verilog.backend.verilog.ast": [[3, 1, 1, "", "Always"], [3, 1, 1, "", "AtNegedge"], [3, 1, 1, "", "AtNegedgeStatement"], [3, 1, 1, "", "AtPosedge"], [3, 1, 1, "", "AtPosedgeStatement"], [3, 1, 1, "", "BlockingSubsitution"], [3, 1, 1, "", "Case"], [3, 1, 1, "", "CaseItem"], [3, 1, 1, "", "Declaration"], [3, 1, 1, "", "Expression"], [3, 1, 1, "", "IfElse"], [3, 1, 1, "", "Initial"], [3, 1, 1, "", "Instantiation"], [3, 1, 1, "", "Module"], [3, 1, 1, "", "NonBlockingSubsitution"], [3, 1, 1, "", "PosedgeSyncAlways"], [3, 1, 1, "", "Statement"], [3, 1, 1, "", "Subsitution"], [3, 1, 1, "", "While"]], "python2verilog.backend.verilog.ast.Always": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Case": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.CaseItem": [[3, 2, 1, "", "to_lines"], [3, 2, 1, "", "to_string"]], "python2verilog.backend.verilog.ast.Declaration": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Expression": [[3, 2, 1, "", "to_string"]], "python2verilog.backend.verilog.ast.IfElse": [[3, 2, 1, "", "append_end_statements"], [3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Initial": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Instantiation": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Module": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Statement": [[3, 2, 1, "", "get_blocked_comment"], [3, 2, 1, "", "get_inline_comment"], [3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.Subsitution": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.ast.While": [[3, 2, 1, "", "to_lines"]], "python2verilog.backend.verilog.codegen": [[3, 1, 1, "", "CaseBuilder"], [3, 1, 1, "", "CodeGen"]], "python2verilog.backend.verilog.codegen.CaseBuilder": [[3, 2, 1, "", "do_edge"], [3, 2, 1, "", "do_vertex"], [3, 2, 1, "", "new_caseitem"]], "python2verilog.backend.verilog.codegen.CodeGen": [[3, 2, 1, "", "from_graph_ir"], [3, 2, 1, "", "from_list_ir"], [3, 2, 1, "", "from_optimal_ir"], [3, 2, 1, "", "get_module_lines"], [3, 2, 1, "", "get_module_str"], [3, 2, 1, "", "graph_build"], [3, 2, 1, "", "graph_build_node"], [3, 2, 1, "", "list_build_case"], [3, 2, 1, "", "list_build_case_item"], [3, 2, 1, "", "list_build_expr"], [3, 2, 1, "", "list_build_stmt"], [3, 3, 1, "", "module"], [3, 2, 1, "", "new_testbench"], [3, 2, 1, "", "new_testbench_lines"], [3, 2, 1, "", "new_testbench_str"]], "python2verilog.convert": [[1, 4, 1, "", "convert_graph"], [1, 4, 1, "", "convert_list"]], "python2verilog.frontend": [[4, 0, 0, "-", "generator2graph"], [4, 0, 0, "-", "generator_parser"]], "python2verilog.frontend.generator2graph": [[4, 1, 1, "", "Generator2Graph"]], "python2verilog.frontend.generator2graph.Generator2Graph": [[4, 3, 1, "", "context"], [4, 3, 1, "", "results"], [4, 3, 1, "", "root"]], "python2verilog.frontend.generator_parser": [[4, 1, 1, "", "Generator2List"]], "python2verilog.frontend.generator_parser.Generator2List": [[4, 2, 1, "", "generate_verilog"], [4, 2, 1, "", "get_context"], [4, 2, 1, "", "get_results"], [4, 2, 1, "", "get_root"], [4, 5, 1, "", "wow_counter"]], "python2verilog.ir": [[5, 0, 0, "-", "context"], [5, 0, 0, "-", "expressions"], [5, 0, 0, "-", "graph"], [5, 0, 0, "-", "statements"]], "python2verilog.ir.context": [[5, 1, 1, "", "Context"]], "python2verilog.ir.context.Context": [[5, 2, 1, "", "is_declared"], [5, 2, 1, "", "to_string"]], "python2verilog.ir.expressions": [[5, 1, 1, "", "Add"], [5, 1, 1, "", "BinOp"], [5, 1, 1, "", "Div"], [5, 1, 1, "", "Expression"], [5, 1, 1, "", "Int"], [5, 1, 1, "", "LessThan"], [5, 1, 1, "", "Mul"], [5, 1, 1, "", "State"], [5, 1, 1, "", "Sub"], [5, 1, 1, "", "Var"]], "python2verilog.ir.expressions.BinOp": [[5, 3, 1, "", "left"], [5, 3, 1, "", "right"], [5, 2, 1, "", "to_string"]], "python2verilog.ir.expressions.Expression": [[5, 2, 1, "", "to_string"]], "python2verilog.ir.graph": [[5, 1, 1, "", "AssignNode"], [5, 1, 1, "", "BasicElement"], [5, 1, 1, "", "ClockedEdge"], [5, 1, 1, "", "DoneNode"], [5, 1, 1, "", "Edge"], [5, 1, 1, "", "Element"], [5, 1, 1, "", "IfElseNode"], [5, 1, 1, "", "NonClockedEdge"], [5, 1, 1, "", "Vertex"], [5, 1, 1, "", "YieldNode"], [5, 4, 1, "", "create_cytoscape_elements"], [5, 4, 1, "", "create_networkx_adjacency_list"]], "python2verilog.ir.graph.AssignNode": [[5, 3, 1, "", "lvalue"], [5, 3, 1, "", "rvalue"], [5, 2, 1, "", "to_string"]], "python2verilog.ir.graph.BasicElement": [[5, 3, 1, "", "child"], [5, 2, 1, "", "get_all_children"], [5, 2, 1, "", "get_optimal_children"], [5, 3, 1, "", "optimal_child"]], "python2verilog.ir.graph.Edge": [[5, 2, 1, "", "get_name"], [5, 2, 1, "", "to_string"]], "python2verilog.ir.graph.Element": [[5, 3, 1, "", "children"], [5, 2, 1, "", "get_all_children"], [5, 2, 1, "", "get_optimal_children"], [5, 3, 1, "", "name"], [5, 2, 1, "", "to_string"], [5, 3, 1, "", "unique_id"]], "python2verilog.ir.graph.IfElseNode": [[5, 3, 1, "", "condition"], [5, 3, 1, "", "false_edge"], [5, 2, 1, "", "get_all_children"], [5, 2, 1, "", "get_optimal_children"], [5, 3, 1, "", "optimal_false_edge"], [5, 3, 1, "", "optimal_true_edge"], [5, 2, 1, "", "to_string"], [5, 3, 1, "", "true_edge"]], "python2verilog.ir.graph.YieldNode": [[5, 3, 1, "", "stmts"], [5, 2, 1, "", "to_string"]], "python2verilog.ir.statements": [[5, 1, 1, "", "BlockingSubsitution"], [5, 1, 1, "", "Case"], [5, 1, 1, "", "CaseItem"], [5, 1, 1, "", "Declaration"], [5, 1, 1, "", "IfElse"], [5, 1, 1, "", "IfElseWrapper"], [5, 1, 1, "", "NonBlockingSubsitution"], [5, 1, 1, "", "StateSubsitution"], [5, 1, 1, "", "Statement"], [5, 1, 1, "", "Subsitution"], [5, 1, 1, "", "ValidSubsitution"], [5, 1, 1, "", "WhileWrapper"], [5, 4, 1, "", "is_valid_append_end_statements"]], "python2verilog.ir.statements.Case": [[5, 2, 1, "", "append_end_statements"], [5, 2, 1, "", "to_lines"]], "python2verilog.ir.statements.CaseItem": [[5, 2, 1, "", "append_end_statements"], [5, 2, 1, "", "to_lines"]], "python2verilog.ir.statements.Declaration": [[5, 2, 1, "", "to_lines"]], "python2verilog.ir.statements.IfElse": [[5, 2, 1, "", "append_end_statements"], [5, 2, 1, "", "to_lines"]], "python2verilog.ir.statements.Statement": [[5, 2, 1, "", "to_lines"]], "python2verilog.ir.statements.Subsitution": [[5, 2, 1, "", "to_lines"]], "python2verilog.ir.statements.WhileWrapper": [[5, 2, 1, "", "append_end_statements"]], "python2verilog.optimizer": [[6, 0, 0, "-", "basic"], [6, 0, 0, "-", "graph"]], "python2verilog.optimizer.basic": [[6, 4, 1, "", "combine_cases"], [6, 4, 1, "", "get_idx_with_state_name"], [6, 4, 1, "", "get_last_state_sub_name"], [6, 4, 1, "", "optimize_if"], [6, 4, 1, "", "remove_unreferenced_states"]], "python2verilog.optimizer.graph": [[6, 1, 1, "", "OptimizeGraph"], [6, 4, 1, "", "backwards_replace"], [6, 4, 1, "", "graph_apply_mapping"], [6, 4, 1, "", "graph_update_mapping"], [6, 4, 1, "", "is_dependent"]], "python2verilog.optimizer.graph.OptimizeGraph": [[6, 5, 1, "", "unique_counter"]], "python2verilog.utils": [[7, 0, 0, "-", "assertions"], [7, 0, 0, "-", "string"]], "python2verilog.utils.assertions": [[7, 4, 1, "", "assert_dict_type"], [7, 4, 1, "", "assert_list_type"], [7, 4, 1, "", "assert_type"]], "python2verilog.utils.string": [[7, 1, 1, "", "ImplementsToLines"], [7, 1, 1, "", "Indent"], [7, 1, 1, "", "Lines"]], "python2verilog.utils.string.ImplementsToLines": [[7, 2, 1, "", "to_lines"], [7, 2, 1, "", "to_string"]], "python2verilog.utils.string.Indent": [[7, 2, 1, "", "indentify"], [7, 5, 1, "", "indentor"]], "python2verilog.utils.string.Lines": [[7, 2, 1, "", "add"], [7, 2, 1, "", "assert_no_newline"], [7, 2, 1, "", "concat"], [7, 2, 1, "", "indent"], [7, 2, 1, "", "nestify"], [7, 2, 1, "", "to_string"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"welcom": 0, "python2verilog": [0, 1, 2, 3, 4, 5, 6, 7], "": 0, "document": 0, "content": [0, 1, 2, 3, 4, 5, 6, 7], "indic": 0, "tabl": 0, "packag": [1, 2, 3, 4, 5, 6, 7], "subpackag": [1, 2], "submodul": [1, 3, 4, 5, 6, 7], "convert": 1, "modul": [1, 2, 3, 4, 5, 6, 7], "backend": [2, 3], "verilog": 3, "ast": 3, "codegen": 3, "frontend": 4, "generator2graph": 4, "generator_pars": 4, "ir": 5, "context": 5, "express": 5, "graph": [5, 6], "statement": 5, "optim": 6, "basic": 6, "util": 7, "assert": 7, "string": 7}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"Welcome to python2verilog\u2019s documentation!": [[0, "welcome-to-python2verilog-s-documentation"]], "Contents:": [[0, null]], "Indices and tables": [[0, "indices-and-tables"]], "python2verilog package": [[1, "python2verilog-package"]], "Subpackages": [[1, "subpackages"], [2, "subpackages"]], "Submodules": [[1, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"]], "python2verilog.convert module": [[1, "module-python2verilog.convert"]], "Module contents": [[1, "module-python2verilog"], [2, "module-python2verilog.backend"], [3, "module-python2verilog.backend.verilog"], [4, "module-python2verilog.frontend"], [5, "module-python2verilog.ir"], [6, "module-python2verilog.optimizer"], [7, "module-python2verilog.utils"]], "python2verilog.backend package": [[2, "python2verilog-backend-package"]], "python2verilog.backend.verilog package": [[3, "python2verilog-backend-verilog-package"]], "python2verilog.backend.verilog.ast module": [[3, "module-python2verilog.backend.verilog.ast"]], "python2verilog.backend.verilog.codegen module": [[3, "module-python2verilog.backend.verilog.codegen"]], "python2verilog.frontend package": [[4, "python2verilog-frontend-package"]], "python2verilog.frontend.generator2graph module": [[4, "module-python2verilog.frontend.generator2graph"]], "python2verilog.frontend.generator_parser module": [[4, "module-python2verilog.frontend.generator_parser"]], "python2verilog.ir package": [[5, "python2verilog-ir-package"]], "python2verilog.ir.context module": [[5, "module-python2verilog.ir.context"]], "python2verilog.ir.expressions module": [[5, "module-python2verilog.ir.expressions"]], "python2verilog.ir.graph module": [[5, "module-python2verilog.ir.graph"]], "python2verilog.ir.statements module": [[5, "module-python2verilog.ir.statements"]], "python2verilog.optimizer package": [[6, "python2verilog-optimizer-package"]], "python2verilog.optimizer.basic module": [[6, "module-python2verilog.optimizer.basic"]], "python2verilog.optimizer.graph module": [[6, "module-python2verilog.optimizer.graph"]], "python2verilog.utils package": [[7, "python2verilog-utils-package"]], "python2verilog.utils.assertions module": [[7, "module-python2verilog.utils.assertions"]], "python2verilog.utils.string module": [[7, "module-python2verilog.utils.string"]]}, "indexentries": {"convert_graph() (in module python2verilog.convert)": [[1, "python2verilog.convert.convert_graph"]], "convert_list() (in module python2verilog.convert)": [[1, "python2verilog.convert.convert_list"]], "module": [[1, "module-python2verilog"], [1, "module-python2verilog.convert"], [2, "module-python2verilog.backend"], [3, "module-python2verilog.backend.verilog"], [3, "module-python2verilog.backend.verilog.ast"], [3, "module-python2verilog.backend.verilog.codegen"], [4, "module-python2verilog.frontend"], [4, "module-python2verilog.frontend.generator2graph"], [4, "module-python2verilog.frontend.generator_parser"], [5, "module-python2verilog.ir"], [5, "module-python2verilog.ir.context"], [5, "module-python2verilog.ir.expressions"], [5, "module-python2verilog.ir.graph"], [5, "module-python2verilog.ir.statements"], [6, "module-python2verilog.optimizer"], [6, "module-python2verilog.optimizer.basic"], [6, "module-python2verilog.optimizer.graph"], [7, "module-python2verilog.utils"], [7, "module-python2verilog.utils.assertions"], [7, "module-python2verilog.utils.string"]], "python2verilog": [[1, "module-python2verilog"]], "python2verilog.convert": [[1, "module-python2verilog.convert"]], "python2verilog.backend": [[2, "module-python2verilog.backend"]], "always (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Always"]], "atnegedge (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.AtNegedge"]], "atnegedgestatement (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.AtNegedgeStatement"]], "atposedge (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.AtPosedge"]], "atposedgestatement (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.AtPosedgeStatement"]], "blockingsubsitution (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.BlockingSubsitution"]], "case (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Case"]], "casebuilder (class in python2verilog.backend.verilog.codegen)": [[3, "python2verilog.backend.verilog.codegen.CaseBuilder"]], "caseitem (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.CaseItem"]], "codegen (class in python2verilog.backend.verilog.codegen)": [[3, "python2verilog.backend.verilog.codegen.CodeGen"]], "declaration (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Declaration"]], "expression (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Expression"]], "ifelse (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.IfElse"]], "initial (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Initial"]], "instantiation (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Instantiation"]], "module (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Module"]], "nonblockingsubsitution (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.NonBlockingSubsitution"]], "posedgesyncalways (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.PosedgeSyncAlways"]], "statement (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Statement"]], "subsitution (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.Subsitution"]], "while (class in python2verilog.backend.verilog.ast)": [[3, "python2verilog.backend.verilog.ast.While"]], "append_end_statements() (ifelse method)": [[3, "python2verilog.backend.verilog.ast.IfElse.append_end_statements"], [5, "python2verilog.ir.statements.IfElse.append_end_statements"]], "do_edge() (casebuilder method)": [[3, "python2verilog.backend.verilog.codegen.CaseBuilder.do_edge"]], "do_vertex() (casebuilder method)": [[3, "python2verilog.backend.verilog.codegen.CaseBuilder.do_vertex"]], "from_graph_ir() (codegen class method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.from_graph_ir"]], "from_list_ir() (codegen class method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.from_list_ir"]], "from_optimal_ir() (codegen class method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.from_optimal_ir"]], "get_blocked_comment() (statement method)": [[3, "python2verilog.backend.verilog.ast.Statement.get_blocked_comment"]], "get_inline_comment() (statement method)": [[3, "python2verilog.backend.verilog.ast.Statement.get_inline_comment"]], "get_module_lines() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.get_module_lines"]], "get_module_str() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.get_module_str"]], "graph_build() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.graph_build"]], "graph_build_node() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.graph_build_node"]], "list_build_case() (codegen static method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.list_build_case"]], "list_build_case_item() (codegen static method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.list_build_case_item"]], "list_build_expr() (codegen static method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.list_build_expr"]], "list_build_stmt() (codegen static method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.list_build_stmt"]], "module (codegen property)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.module"]], "new_caseitem() (casebuilder method)": [[3, "python2verilog.backend.verilog.codegen.CaseBuilder.new_caseitem"]], "new_testbench() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.new_testbench"]], "new_testbench_lines() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.new_testbench_lines"]], "new_testbench_str() (codegen method)": [[3, "python2verilog.backend.verilog.codegen.CodeGen.new_testbench_str"]], "python2verilog.backend.verilog": [[3, "module-python2verilog.backend.verilog"]], "python2verilog.backend.verilog.ast": [[3, "module-python2verilog.backend.verilog.ast"]], "python2verilog.backend.verilog.codegen": [[3, "module-python2verilog.backend.verilog.codegen"]], "to_lines() (always method)": [[3, "python2verilog.backend.verilog.ast.Always.to_lines"]], "to_lines() (case method)": [[3, "python2verilog.backend.verilog.ast.Case.to_lines"], [5, "python2verilog.ir.statements.Case.to_lines"]], "to_lines() (caseitem method)": [[3, "python2verilog.backend.verilog.ast.CaseItem.to_lines"], [5, "python2verilog.ir.statements.CaseItem.to_lines"]], "to_lines() (declaration method)": [[3, "python2verilog.backend.verilog.ast.Declaration.to_lines"], [5, "python2verilog.ir.statements.Declaration.to_lines"]], "to_lines() (ifelse method)": [[3, "python2verilog.backend.verilog.ast.IfElse.to_lines"], [5, "python2verilog.ir.statements.IfElse.to_lines"]], "to_lines() (initial method)": [[3, "python2verilog.backend.verilog.ast.Initial.to_lines"]], "to_lines() (instantiation method)": [[3, "python2verilog.backend.verilog.ast.Instantiation.to_lines"]], "to_lines() (module method)": [[3, "python2verilog.backend.verilog.ast.Module.to_lines"]], "to_lines() (statement method)": [[3, "python2verilog.backend.verilog.ast.Statement.to_lines"], [5, "python2verilog.ir.statements.Statement.to_lines"]], "to_lines() (subsitution method)": [[3, "python2verilog.backend.verilog.ast.Subsitution.to_lines"], [5, "python2verilog.ir.statements.Subsitution.to_lines"]], "to_lines() (while method)": [[3, "python2verilog.backend.verilog.ast.While.to_lines"]], "to_string() (caseitem method)": [[3, "python2verilog.backend.verilog.ast.CaseItem.to_string"]], "to_string() (expression method)": [[3, "python2verilog.backend.verilog.ast.Expression.to_string"], [5, "python2verilog.ir.expressions.Expression.to_string"]], "generator2graph (class in python2verilog.frontend.generator2graph)": [[4, "python2verilog.frontend.generator2graph.Generator2Graph"]], "generator2list (class in python2verilog.frontend.generator_parser)": [[4, "python2verilog.frontend.generator_parser.Generator2List"]], "context (generator2graph property)": [[4, "python2verilog.frontend.generator2graph.Generator2Graph.context"]], "generate_verilog() (generator2list method)": [[4, "python2verilog.frontend.generator_parser.Generator2List.generate_verilog"]], "get_context() (generator2list method)": [[4, "python2verilog.frontend.generator_parser.Generator2List.get_context"]], "get_results() (generator2list method)": [[4, "python2verilog.frontend.generator_parser.Generator2List.get_results"]], "get_root() (generator2list method)": [[4, "python2verilog.frontend.generator_parser.Generator2List.get_root"]], "python2verilog.frontend": [[4, "module-python2verilog.frontend"]], "python2verilog.frontend.generator2graph": [[4, "module-python2verilog.frontend.generator2graph"]], "python2verilog.frontend.generator_parser": [[4, "module-python2verilog.frontend.generator_parser"]], "results (generator2graph property)": [[4, "python2verilog.frontend.generator2graph.Generator2Graph.results"]], "root (generator2graph property)": [[4, "python2verilog.frontend.generator2graph.Generator2Graph.root"]], "wow_counter (generator2list attribute)": [[4, "python2verilog.frontend.generator_parser.Generator2List.wow_counter"]], "add (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Add"]], "assignnode (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.AssignNode"]], "basicelement (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.BasicElement"]], "binop (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.BinOp"]], "blockingsubsitution (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.BlockingSubsitution"]], "case (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.Case"]], "caseitem (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.CaseItem"]], "clockededge (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.ClockedEdge"]], "context (class in python2verilog.ir.context)": [[5, "python2verilog.ir.context.Context"]], "declaration (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.Declaration"]], "div (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Div"]], "donenode (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.DoneNode"]], "edge (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.Edge"]], "element (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.Element"]], "expression (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Expression"]], "ifelse (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.IfElse"]], "ifelsenode (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.IfElseNode"]], "ifelsewrapper (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.IfElseWrapper"]], "int (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Int"]], "lessthan (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.LessThan"]], "mul (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Mul"]], "nonblockingsubsitution (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.NonBlockingSubsitution"]], "nonclockededge (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.NonClockedEdge"]], "state (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.State"]], "statesubsitution (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.StateSubsitution"]], "statement (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.Statement"]], "sub (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Sub"]], "subsitution (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.Subsitution"]], "validsubsitution (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.ValidSubsitution"]], "var (class in python2verilog.ir.expressions)": [[5, "python2verilog.ir.expressions.Var"]], "vertex (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.Vertex"]], "whilewrapper (class in python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.WhileWrapper"]], "yieldnode (class in python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.YieldNode"]], "append_end_statements() (case method)": [[5, "python2verilog.ir.statements.Case.append_end_statements"]], "append_end_statements() (caseitem method)": [[5, "python2verilog.ir.statements.CaseItem.append_end_statements"]], "append_end_statements() (whilewrapper method)": [[5, "python2verilog.ir.statements.WhileWrapper.append_end_statements"]], "child (basicelement property)": [[5, "python2verilog.ir.graph.BasicElement.child"]], "children (element property)": [[5, "python2verilog.ir.graph.Element.children"]], "condition (ifelsenode property)": [[5, "python2verilog.ir.graph.IfElseNode.condition"]], "create_cytoscape_elements() (in module python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.create_cytoscape_elements"]], "create_networkx_adjacency_list() (in module python2verilog.ir.graph)": [[5, "python2verilog.ir.graph.create_networkx_adjacency_list"]], "false_edge (ifelsenode property)": [[5, "python2verilog.ir.graph.IfElseNode.false_edge"]], "get_all_children() (basicelement method)": [[5, "python2verilog.ir.graph.BasicElement.get_all_children"]], "get_all_children() (element method)": [[5, "python2verilog.ir.graph.Element.get_all_children"]], "get_all_children() (ifelsenode method)": [[5, "python2verilog.ir.graph.IfElseNode.get_all_children"]], "get_name() (edge method)": [[5, "python2verilog.ir.graph.Edge.get_name"]], "get_optimal_children() (basicelement method)": [[5, "python2verilog.ir.graph.BasicElement.get_optimal_children"]], "get_optimal_children() (element method)": [[5, "python2verilog.ir.graph.Element.get_optimal_children"]], "get_optimal_children() (ifelsenode method)": [[5, "python2verilog.ir.graph.IfElseNode.get_optimal_children"]], "is_declared() (context method)": [[5, "python2verilog.ir.context.Context.is_declared"]], "is_valid_append_end_statements() (in module python2verilog.ir.statements)": [[5, "python2verilog.ir.statements.is_valid_append_end_statements"]], "left (binop property)": [[5, "python2verilog.ir.expressions.BinOp.left"]], "lvalue (assignnode property)": [[5, "python2verilog.ir.graph.AssignNode.lvalue"]], "name (element property)": [[5, "python2verilog.ir.graph.Element.name"]], "optimal_child (basicelement property)": [[5, "python2verilog.ir.graph.BasicElement.optimal_child"]], "optimal_false_edge (ifelsenode property)": [[5, "python2verilog.ir.graph.IfElseNode.optimal_false_edge"]], "optimal_true_edge (ifelsenode property)": [[5, "python2verilog.ir.graph.IfElseNode.optimal_true_edge"]], "python2verilog.ir": [[5, "module-python2verilog.ir"]], "python2verilog.ir.context": [[5, "module-python2verilog.ir.context"]], "python2verilog.ir.expressions": [[5, "module-python2verilog.ir.expressions"]], "python2verilog.ir.graph": [[5, "module-python2verilog.ir.graph"]], "python2verilog.ir.statements": [[5, "module-python2verilog.ir.statements"]], "right (binop property)": [[5, "python2verilog.ir.expressions.BinOp.right"]], "rvalue (assignnode property)": [[5, "python2verilog.ir.graph.AssignNode.rvalue"]], "stmts (yieldnode property)": [[5, "python2verilog.ir.graph.YieldNode.stmts"]], "to_string() (assignnode method)": [[5, "python2verilog.ir.graph.AssignNode.to_string"]], "to_string() (binop method)": [[5, "python2verilog.ir.expressions.BinOp.to_string"]], "to_string() (context method)": [[5, "python2verilog.ir.context.Context.to_string"]], "to_string() (edge method)": [[5, "python2verilog.ir.graph.Edge.to_string"]], "to_string() (element method)": [[5, "python2verilog.ir.graph.Element.to_string"]], "to_string() (ifelsenode method)": [[5, "python2verilog.ir.graph.IfElseNode.to_string"]], "to_string() (yieldnode method)": [[5, "python2verilog.ir.graph.YieldNode.to_string"]], "true_edge (ifelsenode property)": [[5, "python2verilog.ir.graph.IfElseNode.true_edge"]], "unique_id (element property)": [[5, "python2verilog.ir.graph.Element.unique_id"]], "optimizegraph (class in python2verilog.optimizer.graph)": [[6, "python2verilog.optimizer.graph.OptimizeGraph"]], "backwards_replace() (in module python2verilog.optimizer.graph)": [[6, "python2verilog.optimizer.graph.backwards_replace"]], "combine_cases() (in module python2verilog.optimizer.basic)": [[6, "python2verilog.optimizer.basic.combine_cases"]], "get_idx_with_state_name() (in module python2verilog.optimizer.basic)": [[6, "python2verilog.optimizer.basic.get_idx_with_state_name"]], "get_last_state_sub_name() (in module python2verilog.optimizer.basic)": [[6, "python2verilog.optimizer.basic.get_last_state_sub_name"]], "graph_apply_mapping() (in module python2verilog.optimizer.graph)": [[6, "python2verilog.optimizer.graph.graph_apply_mapping"]], "graph_update_mapping() (in module python2verilog.optimizer.graph)": [[6, "python2verilog.optimizer.graph.graph_update_mapping"]], "is_dependent() (in module python2verilog.optimizer.graph)": [[6, "python2verilog.optimizer.graph.is_dependent"]], "optimize_if() (in module python2verilog.optimizer.basic)": [[6, "python2verilog.optimizer.basic.optimize_if"]], "python2verilog.optimizer": [[6, "module-python2verilog.optimizer"]], "python2verilog.optimizer.basic": [[6, "module-python2verilog.optimizer.basic"]], "python2verilog.optimizer.graph": [[6, "module-python2verilog.optimizer.graph"]], "remove_unreferenced_states() (in module python2verilog.optimizer.basic)": [[6, "python2verilog.optimizer.basic.remove_unreferenced_states"]], "unique_counter (optimizegraph attribute)": [[6, "python2verilog.optimizer.graph.OptimizeGraph.unique_counter"]], "implementstolines (class in python2verilog.utils.string)": [[7, "python2verilog.utils.string.ImplementsToLines"]], "indent (class in python2verilog.utils.string)": [[7, "python2verilog.utils.string.Indent"]], "lines (class in python2verilog.utils.string)": [[7, "python2verilog.utils.string.Lines"]], "add() (lines method)": [[7, "python2verilog.utils.string.Lines.add"]], "assert_dict_type() (in module python2verilog.utils.assertions)": [[7, "python2verilog.utils.assertions.assert_dict_type"]], "assert_list_type() (in module python2verilog.utils.assertions)": [[7, "python2verilog.utils.assertions.assert_list_type"]], "assert_no_newline() (lines static method)": [[7, "python2verilog.utils.string.Lines.assert_no_newline"]], "assert_type() (in module python2verilog.utils.assertions)": [[7, "python2verilog.utils.assertions.assert_type"]], "concat() (lines method)": [[7, "python2verilog.utils.string.Lines.concat"]], "indent() (lines method)": [[7, "python2verilog.utils.string.Lines.indent"]], "indentify() (indent method)": [[7, "python2verilog.utils.string.Indent.indentify"]], "indentor (indent attribute)": [[7, "python2verilog.utils.string.Indent.indentor"]], "nestify() (lines static method)": [[7, "python2verilog.utils.string.Lines.nestify"]], "python2verilog.utils": [[7, "module-python2verilog.utils"]], "python2verilog.utils.assertions": [[7, "module-python2verilog.utils.assertions"]], "python2verilog.utils.string": [[7, "module-python2verilog.utils.string"]], "to_lines() (implementstolines method)": [[7, "python2verilog.utils.string.ImplementsToLines.to_lines"]], "to_string() (implementstolines method)": [[7, "python2verilog.utils.string.ImplementsToLines.to_string"]], "to_string() (lines method)": [[7, "python2verilog.utils.string.Lines.to_string"]]}})