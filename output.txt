00000000000000000000
00111111111111111000
00100000000000001000
00100000000000001000
00100000000000001000
00100000000000001000
00100000000000001000
00100000000000001000
00100000000000001000
00100000000000001000
00111111111111111000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
00000000000000000000
Module(
    body=[
        FunctionDef(
            name='draw_rectangle',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='s_x'),
                    arg(arg='s_y'),
                    arg(arg='height'),
                    arg(arg='width')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                For(
                    target=Name(id='i0', ctx=Store()),
                    iter=Call(
                        func=Name(id='range', ctx=Load()),
                        args=[
                            Constant(value=0),
                            Name(id='width', ctx=Load())],
                        keywords=[]),
                    body=[
                        Expr(
                            value=Yield(
                                value=Tuple(
                                    elts=[
                                        Name(id='s_x', ctx=Load()),
                                        BinOp(
                                            left=Name(id='s_y', ctx=Load()),
                                            op=Add(),
                                            right=Name(id='i0', ctx=Load()))],
                                    ctx=Load()))),
                        Expr(
                            value=Yield(
                                value=Tuple(
                                    elts=[
                                        BinOp(
                                            left=BinOp(
                                                left=Name(id='s_x', ctx=Load()),
                                                op=Add(),
                                                right=Name(id='height', ctx=Load())),
                                            op=Sub(),
                                            right=Constant(value=1)),
                                        BinOp(
                                            left=Name(id='s_y', ctx=Load()),
                                            op=Add(),
                                            right=Name(id='i0', ctx=Load()))],
                                    ctx=Load())))],
                    orelse=[]),
                For(
                    target=Name(id='i1', ctx=Store()),
                    iter=Call(
                        func=Name(id='range', ctx=Load()),
                        args=[
                            Name(id='height', ctx=Load())],
                        keywords=[]),
                    body=[
                        Expr(
                            value=Yield(
                                value=Tuple(
                                    elts=[
                                        BinOp(
                                            left=Name(id='s_x', ctx=Load()),
                                            op=Add(),
                                            right=Name(id='i1', ctx=Load())),
                                        Name(id='s_y', ctx=Load())],
                                    ctx=Load()))),
                        Expr(
                            value=Yield(
                                value=Tuple(
                                    elts=[
                                        BinOp(
                                            left=Name(id='s_x', ctx=Load()),
                                            op=Add(),
                                            right=Name(id='i1', ctx=Load())),
                                        BinOp(
                                            left=BinOp(
                                                left=Name(id='s_y', ctx=Load()),
                                                op=Add(),
                                                right=Name(id='width', ctx=Load())),
                                            op=Sub(),
                                            right=Constant(value=1))],
                                    ctx=Load())))],
                    orelse=[])],
            decorator_list=[],
            returns=Subscript(
                value=Name(id='tuple', ctx=Load()),
                slice=Tuple(
                    elts=[
                        Name(id='int', ctx=Load()),
                        Name(id='int', ctx=Load())],
                    ctx=Load()),
                ctx=Load()))],
    type_ignores=[])
module draw_rectangle(
    input wire _clock,
    input wire _start,
    input wire [31:0] s_x,
    input wire [31:0] s_y,
    input wire [31:0] height,
    input wire [31:0] width,
    output reg [31:0] _draw_rectangle_out0,
    output reg [31:0] _draw_rectangle_out1,
    output reg _done
);
    reg [31:0] _draw_rectangle_STATE;
    reg [31:0] _draw_rectangle_STATE_0;
    reg [31:0] i0;
    reg [31:0] _draw_rectangle_INNER_STATE;
    reg [31:0] _draw_rectangle_INNER_STATE_0;
    reg [31:0] _draw_rectangle_INNER_STATE_1;
    reg [31:0] _draw_rectangle_STATE_1;
    reg [31:0] i1;
    always @(posedge _clock) begin
        if (_start) begin
            _done <= 0;
            _draw_rectangle_STATE <= 0;
            _draw_rectangle_STATE_0 <= 0;
            i0 <= 0;
            _draw_rectangle_INNER_STATE <= 0;
            _draw_rectangle_INNER_STATE_0 <= 0;
            _draw_rectangle_INNER_STATE_1 <= 1;
            _draw_rectangle_STATE_1 <= 1;
            i1 <= 0;
        end else begin
            case (_draw_rectangle_STATE)
                _draw_rectangle_STATE_0: begin
                    if (i0 < width) _draw_rectangle_STATE = _draw_rectangle_STATE + 1; // FOR LOOP START
                    else begin
                        case (_draw_rectangle_INNER_STATE)
                            _draw_rectangle_INNER_STATE_0: begin
                                _draw_rectangle_out0 <= s_x;
                                _draw_rectangle_out1 <= s_y + i0;
                                _draw_rectangle_INNER_STATE <= _draw_rectangle_INNER_STATE + 1;
                            end
                            _draw_rectangle_INNER_STATE_1: begin
                                _draw_rectangle_out0 <= s_x + height + 1;
                                _draw_rectangle_out1 <= s_y + i0;
                                _draw_rectangle_INNER_STATE <= _draw_rectangle_INNER_STATE + 1;
                            end
                        endcase
                    end // FOR LOOP END
                end
                _draw_rectangle_STATE_1: begin
                    if (i1 < height) _draw_rectangle_STATE = _draw_rectangle_STATE + 1; // FOR LOOP START
                    else begin
                        case (_draw_rectangle_INNER_STATE)
                            _draw_rectangle_INNER_STATE_0: begin
                                _draw_rectangle_out0 <= s_x + i1;
                                _draw_rectangle_out1 <= s_y;
                                _draw_rectangle_INNER_STATE <= _draw_rectangle_INNER_STATE + 1;
                            end
                            _draw_rectangle_INNER_STATE_1: begin
                                _draw_rectangle_out0 <= s_x + i1;
                                _draw_rectangle_out1 <= s_y + width + 1;
                                _draw_rectangle_INNER_STATE <= _draw_rectangle_INNER_STATE + 1;
                            end
                        endcase
                    end // FOR LOOP END
                    _done = 1;
                end
            endcase
        end
    end
endmodule
