================================================================================
--------------------------FUNCTION OPTIMIZED DUMP nrt---------------------------
; ModuleID = 'nrt'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.const.pickledata.140151045232448 = internal constant [102 x i8] c"\80\04\95[\00\00\00\00\00\00\00\8C\08builtins\94\8C\0CRuntimeError\94\93\94\8C6numba jitted function aborted due to unresolved symbol\94\85\94N\87\94."
@.const.pickledata.140151045232448.sha1 = internal constant [20 x i8] c"\97\BE\DC\DF\EC\8E\80\B7\09>P\CE%\EDV\F7r\0E\0C\9C"
@.const.picklebuf.140151045232448 = internal constant { i8*, i32, i8*, i8*, i32 } { i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.const.pickledata.140151045232448, i32 0, i32 0), i32 102, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.140151045232448.sha1, i32 0, i32 0), i8* null, i32 0 }

define i64 @nrt_atomic_add(i64* %.1) {
.3:
  %.4 = atomicrmw add i64* %.1, i64 1 monotonic, align 8
  %.5 = add i64 %.4, 1
  ret i64 %.5
}

define i64 @nrt_atomic_sub(i64* %.1) {
.3:
  %.4 = atomicrmw sub i64* %.1, i64 1 monotonic, align 8
  %.5 = sub i64 %.4, 1
  ret i64 %.5
}

define i32 @nrt_atomic_cas(i64* %.1, i64 %.2, i64 %.3, i64* %.4) {
.6:
  %.7 = cmpxchg i64* %.1, i64 %.2, i64 %.3 monotonic monotonic, align 8
  %.8 = extractvalue { i64, i1 } %.7, 0
  %.9 = extractvalue { i64, i1 } %.7, 1
  store i64 %.8, i64* %.4, align 8
  %.11 = zext i1 %.9 to i32
  ret i32 %.11
}

define i8* @NRT_MemInfo_data_fast(i8* %.1) {
.3:
  %.4 = bitcast i8* %.1 to { i64, i8*, i8*, i8*, i64 }*
  %.5 = getelementptr { i64, i8*, i8*, i8*, i64 }, { i64, i8*, i8*, i8*, i64 }* %.4, i32 0, i32 3
  %.6 = load i8*, i8** %.5, align 8
  ret i8* %.6
}

; Function Attrs: noinline
define void @NRT_incref(i8* %.1) #0 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %common.ret, label %.3.endif, !prof !0

common.ret:                                       ; preds = %.3, %.3.endif
  ret void

.3.endif:                                         ; preds = %.3
  %.7 = bitcast i8* %.1 to i64*
  %.8 = call i64 @nrt_atomic_add(i64* %.7)
  br label %common.ret
}

; Function Attrs: noinline
define void @NRT_decref(i8* %.1) #0 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %common.ret, label %.3.endif, !prof !0

common.ret:                                       ; preds = %.3.endif, %.3.endif.if, %.3
  ret void

.3.endif:                                         ; preds = %.3
  fence release
  %.8 = bitcast i8* %.1 to i64*
  %.9 = call i64 @nrt_atomic_sub(i64* %.8)
  %.10 = icmp eq i64 %.9, 0
  br i1 %.10, label %.3.endif.if, label %common.ret, !prof !0

.3.endif.if:                                      ; preds = %.3.endif
  fence acquire
  call void @NRT_MemInfo_call_dtor(i8* %.1)
  br label %common.ret
}

declare void @NRT_MemInfo_call_dtor(i8*)

define i32 @nrt_unresolved_abort(i8** %.1, { i8*, i32, i8*, i8*, i32 }** %.2) {
.4:
  store { i8*, i32, i8*, i8*, i32 }* @.const.picklebuf.140151045232448, { i8*, i32, i8*, i8*, i32 }** %.2, align 8, !numba_exception_output !1
  ret i32 1
}

attributes #0 = { noinline }

!0 = !{!"branch_weights", i32 1, i32 99}
!1 = !{i1 true}

================================================================================
================================================================================
-------------------------------OPTIMIZED DUMP nrt-------------------------------
; ModuleID = 'nrt'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.const.pickledata.140151045232448 = internal constant [102 x i8] c"\80\04\95[\00\00\00\00\00\00\00\8C\08builtins\94\8C\0CRuntimeError\94\93\94\8C6numba jitted function aborted due to unresolved symbol\94\85\94N\87\94."
@.const.pickledata.140151045232448.sha1 = internal constant [20 x i8] c"\97\BE\DC\DF\EC\8E\80\B7\09>P\CE%\EDV\F7r\0E\0C\9C"
@.const.picklebuf.140151045232448 = internal constant { i8*, i32, i8*, i8*, i32 } { i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.const.pickledata.140151045232448, i32 0, i32 0), i32 102, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.140151045232448.sha1, i32 0, i32 0), i8* null, i32 0 }

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define i64 @nrt_atomic_add(i64* nocapture %.1) local_unnamed_addr #0 {
.3:
  %.4 = atomicrmw add i64* %.1, i64 1 monotonic, align 8
  %.5 = add i64 %.4, 1
  ret i64 %.5
}

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define i64 @nrt_atomic_sub(i64* nocapture %.1) local_unnamed_addr #0 {
.3:
  %.4 = atomicrmw sub i64* %.1, i64 1 monotonic, align 8
  %.5 = add i64 %.4, -1
  ret i64 %.5
}

; Function Attrs: mustprogress nofree norecurse nounwind willreturn
define i32 @nrt_atomic_cas(i64* nocapture %.1, i64 %.2, i64 %.3, i64* nocapture writeonly %.4) local_unnamed_addr #0 {
.6:
  %.7 = cmpxchg i64* %.1, i64 %.2, i64 %.3 monotonic monotonic, align 8
  %.8 = extractvalue { i64, i1 } %.7, 0
  %.9 = extractvalue { i64, i1 } %.7, 1
  store i64 %.8, i64* %.4, align 8
  %.11 = zext i1 %.9 to i32
  ret i32 %.11
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readonly willreturn
define i8* @NRT_MemInfo_data_fast(i8* nocapture readonly %.1) local_unnamed_addr #1 {
.3:
  %.5 = getelementptr i8, i8* %.1, i64 24
  %0 = bitcast i8* %.5 to i8**
  %.6 = load i8*, i8** %0, align 8
  ret i8* %.6
}

; Function Attrs: mustprogress nofree noinline norecurse nounwind willreturn
define void @NRT_incref(i8* %.1) local_unnamed_addr #2 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %common.ret, label %.3.endif, !prof !0

common.ret:                                       ; preds = %.3, %.3.endif
  ret void

.3.endif:                                         ; preds = %.3
  %.7 = bitcast i8* %.1 to i64*
  %.4.i = atomicrmw add i64* %.7, i64 1 monotonic, align 8
  br label %common.ret
}

; Function Attrs: noinline
define void @NRT_decref(i8* %.1) local_unnamed_addr #3 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %common.ret, label %.3.endif, !prof !0

common.ret:                                       ; preds = %.3.endif, %.3
  ret void

.3.endif:                                         ; preds = %.3
  fence release
  %.8 = bitcast i8* %.1 to i64*
  %.4.i = atomicrmw sub i64* %.8, i64 1 monotonic, align 8
  %.10 = icmp eq i64 %.4.i, 1
  br i1 %.10, label %.3.endif.if, label %common.ret, !prof !0

.3.endif.if:                                      ; preds = %.3.endif
  fence acquire
  tail call void @NRT_MemInfo_call_dtor(i8* nonnull %.1)
  ret void
}

declare void @NRT_MemInfo_call_dtor(i8*) local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn writeonly
define i32 @nrt_unresolved_abort(i8** nocapture readnone %.1, { i8*, i32, i8*, i8*, i32 }** nocapture writeonly %.2) local_unnamed_addr #4 {
.4:
  store { i8*, i32, i8*, i8*, i32 }* @.const.picklebuf.140151045232448, { i8*, i32, i8*, i8*, i32 }** %.2, align 8, !numba_exception_output !1
  ret i32 1
}

attributes #0 = { mustprogress nofree norecurse nounwind willreturn }
attributes #1 = { mustprogress nofree norecurse nosync nounwind readonly willreturn }
attributes #2 = { mustprogress nofree noinline norecurse nounwind willreturn }
attributes #3 = { noinline }
attributes #4 = { mustprogress nofree norecurse nosync nounwind willreturn writeonly }

!0 = !{!"branch_weights", i32 1, i32 99}
!1 = !{i1 true}

================================================================================
================================================================================
----------------------------------ASSEMBLY nrt----------------------------------
	.text
	.file	"<string>"
	.globl	nrt_atomic_add
	.p2align	4, 0x90
	.type	nrt_atomic_add,@function
nrt_atomic_add:
	movl	$1, %eax
	lock		xaddq	%rax, (%rdi)
	incq	%rax
	retq
.Lfunc_end0:
	.size	nrt_atomic_add, .Lfunc_end0-nrt_atomic_add

	.globl	nrt_atomic_sub
	.p2align	4, 0x90
	.type	nrt_atomic_sub,@function
nrt_atomic_sub:
	movq	$-1, %rax
	lock		xaddq	%rax, (%rdi)
	decq	%rax
	retq
.Lfunc_end1:
	.size	nrt_atomic_sub, .Lfunc_end1-nrt_atomic_sub

	.globl	nrt_atomic_cas
	.p2align	4, 0x90
	.type	nrt_atomic_cas,@function
nrt_atomic_cas:
	movq	%rsi, %rax
	xorl	%esi, %esi
	lock		cmpxchgq	%rdx, (%rdi)
	sete	%sil
	movq	%rax, (%rcx)
	movl	%esi, %eax
	retq
.Lfunc_end2:
	.size	nrt_atomic_cas, .Lfunc_end2-nrt_atomic_cas

	.globl	NRT_MemInfo_data_fast
	.p2align	4, 0x90
	.type	NRT_MemInfo_data_fast,@function
NRT_MemInfo_data_fast:
	movq	24(%rdi), %rax
	retq
.Lfunc_end3:
	.size	NRT_MemInfo_data_fast, .Lfunc_end3-NRT_MemInfo_data_fast

	.globl	NRT_incref
	.p2align	4, 0x90
	.type	NRT_incref,@function
NRT_incref:
	testq	%rdi, %rdi
	je	.LBB4_2
	lock		incq	(%rdi)
.LBB4_2:
	retq
.Lfunc_end4:
	.size	NRT_incref, .Lfunc_end4-NRT_incref

	.globl	NRT_decref
	.p2align	4, 0x90
	.type	NRT_decref,@function
NRT_decref:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.LBB5_2
	#MEMBARRIER
	lock		decq	(%rdi)
	je	.LBB5_3
.LBB5_2:
	retq
.LBB5_3:
	#MEMBARRIER
	movabsq	$NRT_MemInfo_call_dtor, %rax
	jmpq	*%rax
.Lfunc_end5:
	.size	NRT_decref, .Lfunc_end5-NRT_decref
	.cfi_endproc

	.globl	nrt_unresolved_abort
	.p2align	4, 0x90
	.type	nrt_unresolved_abort,@function
nrt_unresolved_abort:
	movabsq	$.const.picklebuf.140151045232448, %rax
	movq	%rax, (%rsi)
	movl	$1, %eax
	retq
.Lfunc_end6:
	.size	nrt_unresolved_abort, .Lfunc_end6-nrt_unresolved_abort

	.type	.const.pickledata.140151045232448,@object
	.section	.rodata,"a",@progbits
	.p2align	4
.const.pickledata.140151045232448:
	.ascii	"\200\004\225[\000\000\000\000\000\000\000\214\bbuiltins\224\214\fRuntimeError\224\223\224\2146numba jitted function aborted due to unresolved symbol\224\205\224N\207\224."
	.size	.const.pickledata.140151045232448, 102

	.type	.const.pickledata.140151045232448.sha1,@object
	.p2align	4
.const.pickledata.140151045232448.sha1:
	.ascii	"\227\276\334\337\354\216\200\267\t>P\316%\355V\367r\016\f\234"
	.size	.const.pickledata.140151045232448.sha1, 20

	.type	.const.picklebuf.140151045232448,@object
	.p2align	4
.const.picklebuf.140151045232448:
	.quad	.const.pickledata.140151045232448
	.long	102
	.zero	4
	.quad	.const.pickledata.140151045232448.sha1
	.quad	0
	.long	0
	.zero	4
	.size	.const.picklebuf.140151045232448, 40

	.section	".note.GNU-stack","",@progbits

================================================================================
-----------------------IR DUMP: reallyreallycoolfunction------------------------
label 0:
    n = arg(0, name=n)                       ['n']
    alphaa = const(int, 0)                   ['alphaa']
    betaa = const(int, 123456789)            ['betaa']
    $14build_tuple.3 = build_tuple(items=[Var(betaa, python.py:7)]) ['$14build_tuple.3', 'betaa']
    $16yield_value.4 = yield $14build_tuple.3 ['$14build_tuple.3', '$16yield_value.4']
    catt = const(int, 0)                     ['catt']
    countt = const(int, 1)                   ['countt']
    $32compare_op.9 = countt < n             ['$32compare_op.9', 'countt', 'n']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.9, func=bool34, args=(Var($32compare_op.9, python.py:11),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.9', '$34pred', 'bool34']
    branch $34pred, 36, 88                   ['$34pred']
label 36:
    $const38.1 = const(int, 1)               ['$const38.1']
    $40inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=countt, rhs=$const38.1, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.2', '$const38.1', 'countt']
    countt = $40inplace_add.2                ['$40inplace_add.2', 'countt']
    $const46.4 = const(int, 987)             ['$const46.4']
    alphaa = betaa + $const46.4              ['$const46.4', 'alphaa', 'betaa']
    betaa = catt                             ['betaa', 'catt']
    $60binary_add.9 = alphaa + betaa         ['$60binary_add.9', 'alphaa', 'betaa']
    $const62.10 = const(int, 654)            ['$const62.10']
    catt = $60binary_add.9 + $const62.10     ['$60binary_add.9', '$const62.10', 'catt']
    $70build_tuple.13 = build_tuple(items=[Var(catt, python.py:9)]) ['$70build_tuple.13', 'catt']
    $72yield_value.14 = yield $70build_tuple.13 ['$70build_tuple.13', '$72yield_value.14']
    $80compare_op.17 = countt < n            ['$80compare_op.17', 'countt', 'n']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.17, func=bool82, args=(Var($80compare_op.17, python.py:11),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.17', '$82pred', 'bool82']
    branch $82pred, 36, 84                   ['$82pred']
label 84:
    $const84.0 = const(NoneType, None)       ['$const84.0']
    $86return_value.1 = cast(value=$const84.0) ['$86return_value.1', '$const84.0']
    return $86return_value.1                 ['$86return_value.1']
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

--------------------GENERATOR INFO: reallyreallycoolfunction--------------------
generator state variables: ['$14build_tuple.3', '$70build_tuple.13', '$82pred', 'betaa', 'catt', 'countt', 'n']
yield point #1: live variables = ['betaa', 'n'], weak live variables = ['$14build_tuple.3']
yield point #2: live variables = ['$82pred', 'betaa', 'catt', 'countt', 'n'], weak live variables = ['$70build_tuple.13']
---------------------SSA IR DUMP: reallyreallycoolfunction----------------------
label 0:
    n = arg(0, name=n)                       ['n']
    alphaa = const(int, 0)                   ['alphaa']
    betaa = const(int, 123456789)            ['betaa']
    $14build_tuple.3 = build_tuple(items=[Var(betaa, python.py:7)]) ['$14build_tuple.3', 'betaa']
    $16yield_value.4 = yield $14build_tuple.3 ['$14build_tuple.3', '$16yield_value.4']
    catt = const(int, 0)                     ['catt']
    countt = const(int, 1)                   ['countt']
    $32compare_op.9 = countt < n             ['$32compare_op.9', 'countt', 'n']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.9, func=bool34, args=(Var($32compare_op.9, python.py:11),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.9', '$34pred', 'bool34']
    branch $34pred, 36, 88                   ['$34pred']
label 36:
    countt.2 = phi(incoming_values=[Var(countt, python.py:10), Var(countt.1, python.py:12)], incoming_blocks=[0, 36]) ['countt', 'countt.1', 'countt.2']
    betaa.2 = phi(incoming_values=[Var(betaa, python.py:7), Var(betaa.1, python.py:14)], incoming_blocks=[0, 36]) ['betaa', 'betaa.1', 'betaa.2']
    catt.2 = phi(incoming_values=[Var(catt, python.py:9), Var(catt.1, python.py:15)], incoming_blocks=[0, 36]) ['catt', 'catt.1', 'catt.2']
    $const38.1 = const(int, 1)               ['$const38.1']
    $40inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=countt.2, rhs=$const38.1, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.2', '$const38.1', 'countt.2']
    countt.1 = $40inplace_add.2              ['$40inplace_add.2', 'countt.1']
    $const46.4 = const(int, 987)             ['$const46.4']
    alphaa.1 = betaa.2 + $const46.4          ['$const46.4', 'alphaa.1', 'betaa.2']
    betaa.1 = catt.2                         ['betaa.1', 'catt.2']
    $60binary_add.9 = alphaa.1 + betaa.1     ['$60binary_add.9', 'alphaa.1', 'betaa.1']
    $const62.10 = const(int, 654)            ['$const62.10']
    catt.1 = $60binary_add.9 + $const62.10   ['$60binary_add.9', '$const62.10', 'catt.1']
    $70build_tuple.13 = build_tuple(items=[Var(catt.1, python.py:15)]) ['$70build_tuple.13', 'catt.1']
    $72yield_value.14 = yield $70build_tuple.13 ['$70build_tuple.13', '$72yield_value.14']
    $80compare_op.17 = countt.1 < n          ['$80compare_op.17', 'countt.1', 'n']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($80compare_op.17, func=bool82, args=(Var($80compare_op.17, python.py:11),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.17', '$82pred', 'bool82']
    branch $82pred, 36, 84                   ['$82pred']
label 84:
    $const84.0 = const(NoneType, None)       ['$const84.0']
    $86return_value.1 = cast(value=$const84.0) ['$86return_value.1', '$const84.0']
    return $86return_value.1                 ['$86return_value.1']
label 88:
    $const88.0 = const(NoneType, None)       ['$const88.0']
    $90return_value.1 = cast(value=$const88.0) ['$90return_value.1', '$const88.0']
    return $90return_value.1                 ['$90return_value.1']

-----------------------------------propagate------------------------------------
---- type variables ----
[$14build_tuple.3 := UniTuple(Literal[int](123456789) x 1),
 $16yield_value.4 := none,
 $32compare_op.9 := bool,
 $34pred := bool,
 $40inplace_add.2 := int64,
 $60binary_add.9 := int64,
 $70build_tuple.13 := UniTuple(int64 x 1),
 $72yield_value.14 := none,
 $80compare_op.17 := bool,
 $82pred := bool,
 $86return_value.1 := none,
 $90return_value.1 := none,
 $const38.1 := Literal[int](1),
 $const46.4 := Literal[int](987),
 $const62.10 := Literal[int](654),
 $const84.0 := none,
 $const88.0 := none,
 alphaa := Literal[int](0),
 alphaa.1 := int64,
 arg.n := int64,
 betaa := Literal[int](123456789),
 betaa.1 := Literal[int](0),
 betaa.2 := Literal[int](123456789),
 bool34 := Function(<class 'bool'>),
 bool82 := Function(<class 'bool'>),
 catt := Literal[int](0),
 catt.1 := int64,
 catt.2 := Literal[int](0),
 countt := Literal[int](1),
 countt.1 := int64,
 countt.2 := Literal[int](1),
 n := int64]
-----------------------------------propagate------------------------------------
---- type variables ----
[$14build_tuple.3 := UniTuple(Literal[int](123456789) x 1),
 $16yield_value.4 := none,
 $32compare_op.9 := bool,
 $34pred := bool,
 $40inplace_add.2 := int64,
 $60binary_add.9 := int64,
 $70build_tuple.13 := UniTuple(int64 x 1),
 $72yield_value.14 := none,
 $80compare_op.17 := bool,
 $82pred := bool,
 $86return_value.1 := none,
 $90return_value.1 := none,
 $const38.1 := Literal[int](1),
 $const46.4 := Literal[int](987),
 $const62.10 := Literal[int](654),
 $const84.0 := none,
 $const88.0 := none,
 alphaa := Literal[int](0),
 alphaa.1 := int64,
 arg.n := int64,
 betaa := Literal[int](123456789),
 betaa.1 := int64,
 betaa.2 := int64,
 bool34 := Function(<class 'bool'>),
 bool82 := Function(<class 'bool'>),
 catt := Literal[int](0),
 catt.1 := int64,
 catt.2 := int64,
 countt := Literal[int](1),
 countt.1 := int64,
 countt.2 := int64,
 n := int64]
-----------------------------------propagate------------------------------------
---- type variables ----
[$14build_tuple.3 := UniTuple(Literal[int](123456789) x 1),
 $16yield_value.4 := none,
 $32compare_op.9 := bool,
 $34pred := bool,
 $40inplace_add.2 := int64,
 $60binary_add.9 := int64,
 $70build_tuple.13 := UniTuple(int64 x 1),
 $72yield_value.14 := none,
 $80compare_op.17 := bool,
 $82pred := bool,
 $86return_value.1 := none,
 $90return_value.1 := none,
 $const38.1 := Literal[int](1),
 $const46.4 := Literal[int](987),
 $const62.10 := Literal[int](654),
 $const84.0 := none,
 $const88.0 := none,
 alphaa := Literal[int](0),
 alphaa.1 := int64,
 arg.n := int64,
 betaa := Literal[int](123456789),
 betaa.1 := int64,
 betaa.2 := int64,
 bool34 := Function(<class 'bool'>),
 bool82 := Function(<class 'bool'>),
 catt := Literal[int](0),
 catt.1 := int64,
 catt.2 := int64,
 countt := Literal[int](1),
 countt.1 := int64,
 countt.2 := int64,
 n := int64]
---------------------------------Variable types---------------------------------
{'$14build_tuple.3': UniTuple(Literal[int](123456789), 1),
 '$16yield_value.4': none,
 '$32compare_op.9': bool,
 '$34pred': bool,
 '$40inplace_add.2': int64,
 '$60binary_add.9': int64,
 '$70build_tuple.13': UniTuple(int64, 1),
 '$72yield_value.14': none,
 '$80compare_op.17': bool,
 '$82pred': bool,
 '$86return_value.1': none,
 '$90return_value.1': none,
 '$const38.1': Literal[int](1),
 '$const46.4': Literal[int](987),
 '$const62.10': Literal[int](654),
 '$const84.0': none,
 '$const88.0': none,
 'alphaa': Literal[int](0),
 'alphaa.1': int64,
 'arg.n': int64,
 'betaa': Literal[int](123456789),
 'betaa.1': int64,
 'betaa.2': int64,
 'bool34': Function(<class 'bool'>),
 'bool82': Function(<class 'bool'>),
 'catt': Literal[int](0),
 'catt.1': int64,
 'catt.2': int64,
 'countt': Literal[int](1),
 'countt.1': int64,
 'countt.2': int64,
 'n': int64}
----------------------------------Return type-----------------------------------
UniTuple(int64 x 1) generator(func=<function reallyreallycoolfunction at 0x7f7775577010>, args=(int64,), has_finalizer=True)
-----------------------------------Call types-----------------------------------
{$60binary_add.9 + $const62.10: (int64, int64) -> int64,
 alphaa.1 + betaa.1: (int64, int64) -> int64,
 betaa.2 + $const46.4: (int64, int64) -> int64,
 call bool34($32compare_op.9, func=bool34, args=(Var($32compare_op.9, python.py:11),), kws=(), vararg=None, varkwarg=None, target=None): (bool,) -> bool,
 call bool82($80compare_op.17, func=bool82, args=(Var($80compare_op.17, python.py:11),), kws=(), vararg=None, varkwarg=None, target=None): (bool,) -> bool,
 countt < n: (int64, int64) -> bool,
 countt.1 < n: (int64, int64) -> bool,
 inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=countt.2, rhs=$const38.1, static_lhs=Undefined, static_rhs=Undefined): (int64, int64) -> int64}
----------LLVM DUMP <function descriptor 'reallyreallycoolfunction$1'>----------
; ModuleID = "reallyreallycoolfunction$1"
target triple = "x86_64-unknown-linux-gnu"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

@"_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx" = common global i8* null
define i32 @"_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx"({i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* noalias nocapture %"retptr", {i8*, i32, i8*, i8*, i32}** noalias nocapture %"excinfo", i64 %"arg.n")
{
entry:
  %".5" = insertvalue {i64} undef, i64 %"arg.n", 0
  %".6" = insertvalue {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}} undef, i32 0, 0
  %".7" = insertvalue {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}} %".6", {i64} %".5", 1
  %".8" = insertvalue {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}} %".7", {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64} zeroinitializer, 2
  store {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}} %".8", {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %"retptr"
  ret i32 0
}

define i32 @"_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29"([1 x i64]* noalias nocapture %"retptr", {i8*, i32, i8*, i8*, i32}** noalias nocapture %"excinfo", {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %"arg.gen")
{
entry:
  %".5" = getelementptr inbounds {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}, {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %"arg.gen", i32 0, i32 1
  %".6" = getelementptr inbounds {i64}, {i64}* %".5", i32 0, i32 0
  %".7" = load i64, i64* %".6"
  %"gen.resume_index" = getelementptr inbounds {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}, {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %"arg.gen", i32 0, i32 0
  %"gen.state" = getelementptr inbounds {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}, {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %"arg.gen", i32 0, i32 2
  %"n" = alloca i64
  store i64 0, i64* %"n"
  %"alphaa" = alloca i64
  store i64 0, i64* %"alphaa"
  %"betaa" = alloca i64
  store i64 0, i64* %"betaa"
  %"betaa.2" = alloca i64
  store i64 0, i64* %"betaa.2"
  %"$14build_tuple.3" = alloca [1 x i64]
  store [1 x i64] zeroinitializer, [1 x i64]* %"$14build_tuple.3"
  %"$16yield_value.4" = alloca i8*
  store i8* null, i8** %"$16yield_value.4"
  %"catt" = alloca i64
  store i64 0, i64* %"catt"
  %"catt.2" = alloca i64
  store i64 0, i64* %"catt.2"
  %"countt" = alloca i64
  store i64 0, i64* %"countt"
  %"countt.2" = alloca i64
  store i64 0, i64* %"countt.2"
  %"$32compare_op.9" = alloca i1
  store i1 0, i1* %"$32compare_op.9"
  %"bool34" = alloca i8*
  store i8* null, i8** %"bool34"
  %"$34pred" = alloca i1
  store i1 0, i1* %"$34pred"
  %"$const38.1" = alloca i64
  store i64 0, i64* %"$const38.1"
  %"$40inplace_add.2" = alloca i64
  store i64 0, i64* %"$40inplace_add.2"
  %"countt.1" = alloca i64
  store i64 0, i64* %"countt.1"
  %"$const46.4" = alloca i64
  store i64 0, i64* %"$const46.4"
  %"alphaa.1" = alloca i64
  store i64 0, i64* %"alphaa.1"
  %"betaa.1" = alloca i64
  store i64 0, i64* %"betaa.1"
  %"$60binary_add.9" = alloca i64
  store i64 0, i64* %"$60binary_add.9"
  %"$const62.10" = alloca i64
  store i64 0, i64* %"$const62.10"
  %"catt.1" = alloca i64
  store i64 0, i64* %"catt.1"
  %"$70build_tuple.13" = alloca [1 x i64]
  store [1 x i64] zeroinitializer, [1 x i64]* %"$70build_tuple.13"
  %"$82pred" = alloca i1
  store i1 0, i1* %"$82pred"
  %".197" = alloca i1
  store i1 0, i1* %".197"
  %"$72yield_value.14" = alloca i8*
  store i8* null, i8** %"$72yield_value.14"
  %"$80compare_op.17" = alloca i1
  store i1 0, i1* %"$80compare_op.17"
  %"bool82" = alloca i8*
  store i8* null, i8** %"bool82"
  %"$const84.0" = alloca i8*
  store i8* null, i8** %"$const84.0"
  %"$86return_value.1" = alloca i8*
  store i8* null, i8** %"$86return_value.1"
  %"$const88.0" = alloca i8*
  store i8* null, i8** %"$const88.0"
  %"$90return_value.1" = alloca i8*
  store i8* null, i8** %"$90return_value.1"
  br label %"generator_prologue"
generator_prologue:
  %".299" = load i32, i32* %"gen.resume_index"
  switch i32 %".299", label %"stop_iteration" [i32 1, label %"generator_resume1" i32 2, label %"generator_resume2" i32 0, label %"B0"]
B0:
  store i64 %".7", i64* %"n"
  %".11" = load i64, i64* %"alphaa"
  store i64 0, i64* %"alphaa"
  %".13" = load i64, i64* %"alphaa"
  store i64 0, i64* %"alphaa"
  %".16" = load i64, i64* %"betaa"
  store i64 123456789, i64* %"betaa"
  %".18" = load i64, i64* %"betaa"
  %".20" = load i64, i64* %"betaa.2"
  store i64 123456789, i64* %"betaa.2"
  %".22" = load i64, i64* %"betaa"
  %".23" = insertvalue [1 x i64] undef, i64 %".22", 0
  %".24" = extractvalue [1 x i64] %".23", 0
  %".26" = load [1 x i64], [1 x i64]* %"$14build_tuple.3"
  %".27" = extractvalue [1 x i64] %".26", 0
  store [1 x i64] %".23", [1 x i64]* %"$14build_tuple.3"
  %".29" = load i64, i64* %"betaa"
  store i64 0, i64* %"betaa"
  %".31" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 3
  %".32" = load i64, i64* %"betaa.2"
  store i64 %".32", i64* %".31"
  %".34" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 7
  %".35" = load i64, i64* %"n"
  store i64 %".35", i64* %".34"
  store i32 1, i32* %"gen.resume_index"
  %".38" = load [1 x i64], [1 x i64]* %"$14build_tuple.3"
  %".39" = extractvalue [1 x i64] %".38", 0
  %".40" = insertvalue [1 x i64] undef, i64 123456789, 0
  store [1 x i64] %".40", [1 x i64]* %"retptr"
  ret i32 0
B36:
  %".96" = load i1, i1* %"$34pred"
  store i1 0, i1* %"$34pred"
  %".99" = load i64, i64* %"$const38.1"
  store i64 1, i64* %"$const38.1"
  %".101" = load i64, i64* %"countt.2"
  %".102" = load i64, i64* %"$const38.1"
  %".103" = add nsw i64 %".101", 1
  %".105" = load i64, i64* %"$40inplace_add.2"
  store i64 %".103", i64* %"$40inplace_add.2"
  %".107" = load i64, i64* %"$const38.1"
  store i64 0, i64* %"$const38.1"
  %".109" = load i64, i64* %"$40inplace_add.2"
  %".111" = load i64, i64* %"countt.1"
  store i64 %".109", i64* %"countt.1"
  %".113" = load i64, i64* %"$40inplace_add.2"
  store i64 0, i64* %"$40inplace_add.2"
  %".115" = load i64, i64* %"countt.1"
  %".116" = load i64, i64* %"countt.2"
  store i64 %".115", i64* %"countt.2"
  %".119" = load i64, i64* %"$const46.4"
  store i64 987, i64* %"$const46.4"
  %".121" = load i64, i64* %"betaa.2"
  %".122" = load i64, i64* %"$const46.4"
  %".123" = add nsw i64 %".121", 987
  %".125" = load i64, i64* %"alphaa.1"
  store i64 %".123", i64* %"alphaa.1"
  %".127" = load i64, i64* %"$const46.4"
  store i64 0, i64* %"$const46.4"
  %".129" = load i64, i64* %"catt.2"
  %".131" = load i64, i64* %"betaa.1"
  store i64 %".129", i64* %"betaa.1"
  %".133" = load i64, i64* %"betaa.1"
  %".134" = load i64, i64* %"betaa.2"
  store i64 %".133", i64* %"betaa.2"
  %".136" = load i64, i64* %"alphaa.1"
  %".137" = load i64, i64* %"betaa.1"
  %".138" = add nsw i64 %".136", %".137"
  %".140" = load i64, i64* %"$60binary_add.9"
  store i64 %".138", i64* %"$60binary_add.9"
  %".142" = load i64, i64* %"betaa.1"
  store i64 0, i64* %"betaa.1"
  %".144" = load i64, i64* %"alphaa.1"
  store i64 0, i64* %"alphaa.1"
  %".147" = load i64, i64* %"$const62.10"
  store i64 654, i64* %"$const62.10"
  %".149" = load i64, i64* %"$60binary_add.9"
  %".150" = load i64, i64* %"$const62.10"
  %".151" = add nsw i64 %".149", 654
  %".153" = load i64, i64* %"catt.1"
  store i64 %".151", i64* %"catt.1"
  %".155" = load i64, i64* %"$const62.10"
  store i64 0, i64* %"$const62.10"
  %".157" = load i64, i64* %"$60binary_add.9"
  store i64 0, i64* %"$60binary_add.9"
  %".159" = load i64, i64* %"catt.1"
  %".160" = load i64, i64* %"catt.2"
  store i64 %".159", i64* %"catt.2"
  %".162" = load i64, i64* %"catt.1"
  %".163" = insertvalue [1 x i64] undef, i64 %".162", 0
  %".164" = extractvalue [1 x i64] %".163", 0
  %".166" = load [1 x i64], [1 x i64]* %"$70build_tuple.13"
  %".167" = extractvalue [1 x i64] %".166", 0
  store [1 x i64] %".163", [1 x i64]* %"$70build_tuple.13"
  %".169" = load i64, i64* %"catt.1"
  store i64 0, i64* %"catt.1"
  %".171" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 2
  %".173" = load i1, i1* %"$82pred"
  %".174" = zext i1 %".173" to i8
  store i8 %".174", i8* %".171"
  %".176" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 7
  %".177" = load i64, i64* %"n"
  store i64 %".177", i64* %".176"
  %".179" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 6
  %".180" = load i64, i64* %"countt.2"
  store i64 %".180", i64* %".179"
  %".182" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 5
  %".183" = load i64, i64* %"countt.1"
  store i64 %".183", i64* %".182"
  %".185" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 4
  %".186" = load i64, i64* %"catt.2"
  store i64 %".186", i64* %".185"
  %".188" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 3
  %".189" = load i64, i64* %"betaa.2"
  store i64 %".189", i64* %".188"
  store i32 2, i32* %"gen.resume_index"
  %".192" = load [1 x i64], [1 x i64]* %"$70build_tuple.13"
  store [1 x i64] %".192", [1 x i64]* %"retptr"
  ret i32 0
B84:
  %".256" = load i64, i64* %"n"
  store i64 0, i64* %"n"
  %".258" = load i64, i64* %"countt.2"
  store i64 0, i64* %"countt.2"
  %".260" = load i64, i64* %"catt.2"
  store i64 0, i64* %"catt.2"
  %".262" = load i64, i64* %"betaa.2"
  store i64 0, i64* %"betaa.2"
  %".264" = load i1, i1* %"$82pred"
  store i1 0, i1* %"$82pred"
  %".267" = load i8*, i8** %"$const84.0"
  store i8* null, i8** %"$const84.0"
  %".269" = load i8*, i8** %"$const84.0"
  %".271" = load i8*, i8** %"$86return_value.1"
  store i8* %".269", i8** %"$86return_value.1"
  %".273" = load i8*, i8** %"$const84.0"
  store i8* null, i8** %"$const84.0"
  store i32 -1, i32* %"gen.resume_index"
  ret i32 -3
B88:
  %".277" = load i64, i64* %"n"
  store i64 0, i64* %"n"
  %".279" = load i64, i64* %"countt.2"
  store i64 0, i64* %"countt.2"
  %".281" = load i64, i64* %"catt.2"
  store i64 0, i64* %"catt.2"
  %".283" = load i64, i64* %"betaa.2"
  store i64 0, i64* %"betaa.2"
  %".285" = load i1, i1* %"$34pred"
  store i1 0, i1* %"$34pred"
  %".288" = load i8*, i8** %"$const88.0"
  store i8* null, i8** %"$const88.0"
  %".290" = load i8*, i8** %"$const88.0"
  %".292" = load i8*, i8** %"$90return_value.1"
  store i8* %".290", i8** %"$90return_value.1"
  %".294" = load i8*, i8** %"$const88.0"
  store i8* null, i8** %"$const88.0"
  store i32 -1, i32* %"gen.resume_index"
  ret i32 -3
generator_resume1:
  %".43" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 3
  %".44" = load i64, i64* %".43"
  %".45" = load i64, i64* %"betaa.2"
  store i64 %".44", i64* %"betaa.2"
  %".47" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 7
  %".48" = load i64, i64* %".47"
  %".49" = load i64, i64* %"n"
  store i64 %".48", i64* %"n"
  %".52" = load i8*, i8** %"$16yield_value.4"
  store i8* null, i8** %"$16yield_value.4"
  %".54" = load i8*, i8** %"$16yield_value.4"
  store i8* null, i8** %"$16yield_value.4"
  %".56" = load [1 x i64], [1 x i64]* %"$14build_tuple.3"
  %".57" = extractvalue [1 x i64] %".56", 0
  store [1 x i64] zeroinitializer, [1 x i64]* %"$14build_tuple.3"
  %".60" = load i64, i64* %"catt"
  store i64 0, i64* %"catt"
  %".62" = load i64, i64* %"catt"
  %".64" = load i64, i64* %"catt.2"
  store i64 0, i64* %"catt.2"
  %".66" = load i64, i64* %"catt"
  store i64 0, i64* %"catt"
  %".69" = load i64, i64* %"countt"
  store i64 1, i64* %"countt"
  %".71" = load i64, i64* %"countt"
  %".73" = load i64, i64* %"countt.2"
  store i64 1, i64* %"countt.2"
  %".75" = load i64, i64* %"countt"
  %".76" = load i64, i64* %"n"
  %".77" = icmp slt i64 1, %".76"
  %".79" = load i1, i1* %"$32compare_op.9"
  store i1 %".77", i1* %"$32compare_op.9"
  %".81" = load i64, i64* %"countt"
  store i64 0, i64* %"countt"
  %".84" = load i8*, i8** %"bool34"
  store i8* null, i8** %"bool34"
  %".86" = load i1, i1* %"$32compare_op.9"
  %".88" = load i1, i1* %"$34pred"
  store i1 %".86", i1* %"$34pred"
  %".90" = load i8*, i8** %"bool34"
  store i8* null, i8** %"bool34"
  %".92" = load i1, i1* %"$32compare_op.9"
  store i1 0, i1* %"$32compare_op.9"
  %".94" = load i1, i1* %"$34pred"
  br i1 %".94", label %"B36", label %"B88"
generator_resume2:
  %".195" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 2
  %".196" = load i8, i8* %".195"
  %".199" = icmp eq i8 %".196", 0
  br i1 %".199", label %"generator_resume2.if", label %"generator_resume2.else"
generator_resume2.if:
  store i1 0, i1* %".197"
  br label %"generator_resume2.endif"
generator_resume2.else:
  store i1 1, i1* %".197"
  br label %"generator_resume2.endif"
generator_resume2.endif:
  %".205" = load i1, i1* %".197"
  %".206" = load i1, i1* %"$82pred"
  store i1 %".205", i1* %"$82pred"
  %".208" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 7
  %".209" = load i64, i64* %".208"
  %".210" = load i64, i64* %"n"
  store i64 %".209", i64* %"n"
  %".212" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 6
  %".213" = load i64, i64* %".212"
  %".214" = load i64, i64* %"countt.2"
  store i64 %".213", i64* %"countt.2"
  %".216" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 5
  %".217" = load i64, i64* %".216"
  %".218" = load i64, i64* %"countt.1"
  store i64 %".217", i64* %"countt.1"
  %".220" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 4
  %".221" = load i64, i64* %".220"
  %".222" = load i64, i64* %"catt.2"
  store i64 %".221", i64* %"catt.2"
  %".224" = getelementptr inbounds {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}* %"gen.state", i32 0, i32 3
  %".225" = load i64, i64* %".224"
  %".226" = load i64, i64* %"betaa.2"
  store i64 %".225", i64* %"betaa.2"
  %".229" = load i8*, i8** %"$72yield_value.14"
  store i8* null, i8** %"$72yield_value.14"
  %".231" = load i8*, i8** %"$72yield_value.14"
  store i8* null, i8** %"$72yield_value.14"
  %".233" = load [1 x i64], [1 x i64]* %"$70build_tuple.13"
  %".234" = extractvalue [1 x i64] %".233", 0
  store [1 x i64] zeroinitializer, [1 x i64]* %"$70build_tuple.13"
  %".236" = load i64, i64* %"countt.1"
  %".237" = load i64, i64* %"n"
  %".238" = icmp slt i64 %".236", %".237"
  %".240" = load i1, i1* %"$80compare_op.17"
  store i1 %".238", i1* %"$80compare_op.17"
  %".242" = load i64, i64* %"countt.1"
  store i64 0, i64* %"countt.1"
  %".245" = load i8*, i8** %"bool82"
  store i8* null, i8** %"bool82"
  %".247" = load i1, i1* %"$80compare_op.17"
  %".248" = load i1, i1* %"$82pred"
  store i1 %".247", i1* %"$82pred"
  %".250" = load i8*, i8** %"bool82"
  store i8* null, i8** %"bool82"
  %".252" = load i1, i1* %"$80compare_op.17"
  store i1 0, i1* %"$80compare_op.17"
  %".254" = load i1, i1* %"$82pred"
  br i1 %".254", label %"B36", label %"B84"
stop_iteration:
  ret i32 -3
}

define void @"finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29"({i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %".1")
{
entry:
  %".3" = getelementptr inbounds {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}, {i32, {i64}, {[1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64}}* %".1", i32 0, i32 1
  %".4" = getelementptr inbounds {i64}, {i64}* %".3", i32 0, i32 0
  %".5" = load i64, i64* %".4"
  ret void
}

================================================================================
================================================================================
----------------FUNCTION OPTIMIZED DUMP reallyreallycoolfunction----------------
; ModuleID = 'reallyreallycoolfunction'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.const.reallyreallycoolfunction.next = internal constant [30 x i8] c"reallyreallycoolfunction.next\00"
@".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx" = internal constant [119 x i8] c"missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx\00"
@".const.Error creating Python tuple from runtime exception arguments" = internal constant [61 x i8] c"Error creating Python tuple from runtime exception arguments\00"
@".const.unknown error when calling native function" = internal constant [43 x i8] c"unknown error when calling native function\00"
@.const.reallyreallycoolfunction = internal constant [25 x i8] c"reallyreallycoolfunction\00"
@_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx = common global i8* null
@PyExc_RuntimeError = external global i8
@".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1" = internal constant [119 x i8] c"missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx\00"
@_Py_NoneStruct = external global i8
@".const.Error creating Python tuple from runtime exception arguments.2" = internal constant [61 x i8] c"Error creating Python tuple from runtime exception arguments\00"
@PyExc_StopIteration = external global i8
@PyExc_SystemError = external global i8
@".const.unknown error when calling native function.3" = internal constant [43 x i8] c"unknown error when calling native function\00"

define i32 @_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* noalias nocapture %retptr, { i8*, i32, i8*, i8*, i32 }** noalias nocapture %excinfo, i64 %arg.n) {
entry:
  %.5 = insertvalue { i64 } undef, i64 %arg.n, 0
  %.7 = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } { i32 0, { i64 } undef, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } undef }, { i64 } %.5, 1
  %.8 = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.7, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } zeroinitializer, 2
  store { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.8, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %retptr, align 8
  ret i32 0
}

define i32 @_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29([1 x i64]* noalias nocapture %retptr, { i8*, i32, i8*, i8*, i32 }** noalias nocapture %excinfo, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen) {
entry:
  %.5 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i32 0, i32 1
  %.6 = getelementptr inbounds { i64 }, { i64 }* %.5, i32 0, i32 0
  %.7 = load i64, i64* %.6, align 8
  %gen.resume_index = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i32 0, i32 0
  %gen.state = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i32 0, i32 2
  %.299 = load i32, i32* %gen.resume_index, align 4
  switch i32 %.299, label %common.ret [
    i32 1, label %generator_resume1
    i32 2, label %generator_resume2
    i32 0, label %B0
  ]

common.ret:                                       ; preds = %entry, %B88, %B84, %B36, %B0
  %common.ret.op = phi i32 [ 0, %B0 ], [ 0, %B36 ], [ -3, %B84 ], [ -3, %B88 ], [ -3, %entry ]
  ret i32 %common.ret.op

B0:                                               ; preds = %entry
  %.31 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 3
  store i64 123456789, i64* %.31, align 8
  %.34 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 7
  store i64 %.7, i64* %.34, align 8
  store i32 1, i32* %gen.resume_index, align 4
  store [1 x i64] [i64 123456789], [1 x i64]* %retptr, align 8
  br label %common.ret

B36:                                              ; preds = %generator_resume2.endif, %generator_resume1
  %n.0 = phi i64 [ %.209, %generator_resume2.endif ], [ %.48, %generator_resume1 ]
  %betaa.2.0 = phi i64 [ %.225, %generator_resume2.endif ], [ %.44, %generator_resume1 ]
  %catt.2.0 = phi i64 [ %.221, %generator_resume2.endif ], [ 0, %generator_resume1 ]
  %countt.2.0 = phi i64 [ %.213, %generator_resume2.endif ], [ 1, %generator_resume1 ]
  %"$82pred.0" = phi i1 [ %.238, %generator_resume2.endif ], [ false, %generator_resume1 ]
  %.103 = add nsw i64 %countt.2.0, 1
  %.123 = add nsw i64 %betaa.2.0, 987
  %.138 = add nsw i64 %.123, %catt.2.0
  %.151 = add nsw i64 %.138, 654
  %.163 = insertvalue [1 x i64] undef, i64 %.151, 0
  %.171 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 2
  %.174 = zext i1 %"$82pred.0" to i8
  store i8 %.174, i8* %.171, align 1
  %.176 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 7
  store i64 %n.0, i64* %.176, align 8
  %.179 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 6
  store i64 %.103, i64* %.179, align 8
  %.182 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 5
  store i64 %.103, i64* %.182, align 8
  %.185 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 4
  store i64 %.151, i64* %.185, align 8
  %.188 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 3
  store i64 %catt.2.0, i64* %.188, align 8
  store i32 2, i32* %gen.resume_index, align 4
  %.192.fca.0.insert = insertvalue [1 x i64] poison, i64 %.151, 0
  store [1 x i64] %.192.fca.0.insert, [1 x i64]* %retptr, align 8
  br label %common.ret

B84:                                              ; preds = %generator_resume2.endif
  store i32 -1, i32* %gen.resume_index, align 4
  br label %common.ret

B88:                                              ; preds = %generator_resume1
  store i32 -1, i32* %gen.resume_index, align 4
  br label %common.ret

generator_resume1:                                ; preds = %entry
  %.43 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 3
  %.44 = load i64, i64* %.43, align 8
  %.47 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 7
  %.48 = load i64, i64* %.47, align 8
  %.77 = icmp slt i64 1, %.48
  br i1 %.77, label %B36, label %B88

generator_resume2:                                ; preds = %entry
  %.195 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 2
  %.196 = load i8, i8* %.195, align 1
  %.199 = icmp eq i8 %.196, 0
  br i1 %.199, label %generator_resume2.if, label %generator_resume2.else

generator_resume2.if:                             ; preds = %generator_resume2
  br label %generator_resume2.endif

generator_resume2.else:                           ; preds = %generator_resume2
  br label %generator_resume2.endif

generator_resume2.endif:                          ; preds = %generator_resume2.else, %generator_resume2.if
  %.208 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 7
  %.209 = load i64, i64* %.208, align 8
  %.212 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 6
  %.213 = load i64, i64* %.212, align 8
  %.216 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 5
  %.217 = load i64, i64* %.216, align 8
  %.220 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 4
  %.221 = load i64, i64* %.220, align 8
  %.224 = getelementptr inbounds { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 }* %gen.state, i32 0, i32 3
  %.225 = load i64, i64* %.224, align 8
  %.238 = icmp slt i64 %.217, %.209
  br i1 %.238, label %B36, label %B84
}

define void @finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.1) {
entry:
  %.3 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.1, i32 0, i32 1
  %.4 = getelementptr inbounds { i64 }, { i64 }* %.3, i32 0, i32 0
  ret void
}

define i8* @_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29(i8* %py_closure, i8* %py_args, i8* %py_kws) {
entry:
  %.5 = alloca i8*, align 8
  %.6 = call i32 (i8*, i8*, i64, i64, ...) @PyArg_UnpackTuple(i8* %py_args, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.const.reallyreallycoolfunction.next, i32 0, i32 0), i64 1, i64 1, i8** %.5)
  %.7 = icmp eq i32 %.6, 0
  %.28 = alloca [1 x i64], align 8
  %.fca.0.gep = getelementptr inbounds [1 x i64], [1 x i64]* %.28, i32 0, i32 0
  store i64 0, i64* %.fca.0.gep, align 8
  %excinfo = alloca { i8*, i32, i8*, i8*, i32 }*, align 8
  store { i8*, i32, i8*, i8*, i32 }* null, { i8*, i32, i8*, i8*, i32 }** %excinfo, align 8
  br i1 %.7, label %common.ret, label %entry.endif, !prof !0

common.ret:                                       ; preds = %entry.endif.endif.endif.endif.endif, %entry.endif.endif.endif.endif.if.endif, %entry.endif.endif.endif.endif.if.endif.if, %entry.endif.endif.endif.endif.endif.if, %entry.endif.endif.endif.endif.endif.endif.endif, %entry, %entry.endif.endif.endif.endif.if.if.if, %entry.endif.endif.endif.if.endif, %entry.endif.endif.endif.if.if, %entry.endif.if
  %common.ret.op = phi i8* [ null, %entry.endif.if ], [ @_Py_NoneStruct, %entry.endif.endif.endif.if.if ], [ %.48, %entry.endif.endif.endif.if.endif ], [ null, %entry.endif.endif.endif.endif.if.if.if ], [ null, %entry ], [ null, %entry.endif.endif.endif.endif.endif.endif.endif ], [ null, %entry.endif.endif.endif.endif.endif.if ], [ null, %entry.endif.endif.endif.endif.if.endif.if ], [ null, %entry.endif.endif.endif.endif.if.endif ], [ null, %entry.endif.endif.endif.endif.endif ]
  ret i8* %common.ret.op

entry.endif:                                      ; preds = %entry
  %.11 = load i8*, i8** @_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, align 8
  %.12 = ptrtoint i8* %.11 to i64
  %.13 = add i64 %.12, 16
  %.14 = inttoptr i64 %.13 to i8*
  %.16 = icmp eq i8* null, %.11
  br i1 %.16, label %entry.endif.if, label %entry.endif.endif, !prof !0

entry.endif.if:                                   ; preds = %entry.endif
  call void @PyErr_SetString(i8* @PyExc_RuntimeError, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx", i32 0, i32 0))
  br label %common.ret

entry.endif.endif:                                ; preds = %entry.endif
  %.20 = load i8*, i8** %.5, align 8
  %.21 = ptrtoint i8* %.20 to i64
  %.22 = add i64 %.21, 56
  %.23 = inttoptr i64 %.22 to { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }*
  %.27 = call i8* @PyEval_SaveThread()
  store i64 0, i64* %.fca.0.gep, align 8
  %.32 = call i32 @_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29([1 x i64]* %.28, { i8*, i32, i8*, i8*, i32 }** %excinfo, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.23) #0
  %.33 = load { i8*, i32, i8*, i8*, i32 }*, { i8*, i32, i8*, i8*, i32 }** %excinfo, align 8
  %.34 = icmp eq i32 %.32, 0
  %.35 = icmp eq i32 %.32, -2
  %.38 = or i1 %.34, %.35
  %.40 = icmp sge i32 %.32, 1
  %.41 = select i1 %.40, { i8*, i32, i8*, i8*, i32 }* %.33, { i8*, i32, i8*, i8*, i32 }* undef
  %.42.fca.0.load = load i64, i64* %.fca.0.gep, align 8
  %.42.fca.0.insert = insertvalue [1 x i64] poison, i64 %.42.fca.0.load, 0
  call void @PyEval_RestoreThread(i8* %.27)
  switch i32 %.32, label %entry.endif.endif.endif.endif [
    i32 -2, label %entry.endif.endif.endif.if
    i32 0, label %entry.endif.endif.endif.if
  ]

entry.endif.endif.endif.if:                       ; preds = %entry.endif.endif, %entry.endif.endif
  br i1 %.35, label %entry.endif.endif.endif.if.if, label %entry.endif.endif.endif.if.endif

entry.endif.endif.endif.endif:                    ; preds = %entry.endif.endif
  br i1 %.40, label %entry.endif.endif.endif.endif.if, label %entry.endif.endif.endif.endif.endif

entry.endif.endif.endif.if.if:                    ; preds = %entry.endif.endif.endif.if
  call void @Py_IncRef(i8* @_Py_NoneStruct)
  br label %common.ret

entry.endif.endif.endif.if.endif:                 ; preds = %entry.endif.endif.endif.if
  %.48 = call i8* @PyTuple_New(i32 1)
  %.52 = call i8* @PyLong_FromLongLong(i64 %.42.fca.0.load)
  %.55 = call i32 @PyTuple_SetItem(i8* %.48, i32 0, i8* %.52)
  br label %common.ret

entry.endif.endif.endif.endif.if:                 ; preds = %entry.endif.endif.endif.endif
  call void @PyErr_Clear()
  %.60 = load { i8*, i32, i8*, i8*, i32 }, { i8*, i32, i8*, i8*, i32 }* %.41, align 8
  %.61 = extractvalue { i8*, i32, i8*, i8*, i32 } %.60, 4
  %.62 = icmp sgt i32 %.61, 0
  br i1 %.62, label %entry.endif.endif.endif.endif.if.if, label %entry.endif.endif.endif.endif.if.else

entry.endif.endif.endif.endif.endif:              ; preds = %entry.endif.endif.endif.endif
  switch i32 %.32, label %entry.endif.endif.endif.endif.endif.endif.endif [
    i32 -3, label %entry.endif.endif.endif.endif.endif.if
    i32 -1, label %common.ret
  ]

entry.endif.endif.endif.endif.if.if:              ; preds = %entry.endif.endif.endif.endif.if
  %.65 = extractvalue { i8*, i32, i8*, i8*, i32 } %.60, 0
  %.67 = extractvalue { i8*, i32, i8*, i8*, i32 } %.60, 1
  %.68 = sext i32 %.67 to i64
  %.69 = call i8* @PyBytes_FromStringAndSize(i8* %.65, i64 %.68)
  %.70 = load { i8*, i32, i8*, i8*, i32 }, { i8*, i32, i8*, i8*, i32 }* %.41, align 8
  %.71 = extractvalue { i8*, i32, i8*, i8*, i32 } %.70, 2
  %.73 = extractvalue { i8*, i32, i8*, i8*, i32 } %.70, 3
  %.74 = bitcast i8* %.73 to i8* (i8*)*
  %.75 = call i8* %.74(i8* %.71)
  %.76 = icmp eq i8* null, %.75
  br i1 %.76, label %entry.endif.endif.endif.endif.if.if.if, label %entry.endif.endif.endif.endif.if.if.endif, !prof !0

entry.endif.endif.endif.endif.if.else:            ; preds = %entry.endif.endif.endif.endif.if
  %.85 = extractvalue { i8*, i32, i8*, i8*, i32 } %.60, 0
  %.87 = extractvalue { i8*, i32, i8*, i8*, i32 } %.60, 1
  %.89 = extractvalue { i8*, i32, i8*, i8*, i32 } %.60, 2
  %.90 = call i8* @numba_unpickle(i8* %.85, i32 %.87, i8* %.89)
  br label %entry.endif.endif.endif.endif.if.endif

entry.endif.endif.endif.endif.if.endif:           ; preds = %entry.endif.endif.endif.endif.if.if.endif, %entry.endif.endif.endif.endif.if.else
  %.92 = phi i8* [ %.80, %entry.endif.endif.endif.endif.if.if.endif ], [ %.90, %entry.endif.endif.endif.endif.if.else ]
  %.93 = icmp ne i8* null, %.92
  br i1 %.93, label %entry.endif.endif.endif.endif.if.endif.if, label %common.ret, !prof !1

entry.endif.endif.endif.endif.if.if.if:           ; preds = %entry.endif.endif.endif.endif.if.if
  call void @PyErr_SetString(i8* @PyExc_RuntimeError, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @".const.Error creating Python tuple from runtime exception arguments", i32 0, i32 0))
  br label %common.ret

entry.endif.endif.endif.endif.if.if.endif:        ; preds = %entry.endif.endif.endif.endif.if.if
  %.80 = call i8* @numba_runtime_build_excinfo_struct(i8* %.69, i8* %.75)
  %.81 = bitcast { i8*, i32, i8*, i8*, i32 }* %.41 to i8*
  call void @NRT_Free(i8* %.81)
  br label %entry.endif.endif.endif.endif.if.endif

entry.endif.endif.endif.endif.if.endif.if:        ; preds = %entry.endif.endif.endif.endif.if.endif
  call void @numba_do_raise(i8* %.92)
  br label %common.ret

entry.endif.endif.endif.endif.endif.if:           ; preds = %entry.endif.endif.endif.endif.endif
  call void @PyErr_SetNone(i8* @PyExc_StopIteration)
  br label %common.ret

entry.endif.endif.endif.endif.endif.endif.endif:  ; preds = %entry.endif.endif.endif.endif.endif
  call void @PyErr_SetString(i8* @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function", i32 0, i32 0))
  br label %common.ret
}

declare i32 @PyArg_UnpackTuple(i8*, i8*, i64, i64, ...)

declare void @PyErr_SetString(i8*, i8*)

declare i8* @PyEval_SaveThread()

declare void @PyEval_RestoreThread(i8*)

declare void @Py_IncRef(i8*)

declare i8* @PyTuple_New(i32)

declare i8* @PyLong_FromLongLong(i64)

declare i32 @PyTuple_SetItem(i8*, i32, i8*)

declare void @PyErr_Clear()

declare i8* @PyBytes_FromStringAndSize(i8*, i64)

declare i8* @numba_unpickle(i8*, i32, i8*)

declare i8* @numba_runtime_build_excinfo_struct(i8*, i8*)

declare void @NRT_Free(i8*)

declare void @numba_do_raise(i8*)

declare void @PyErr_SetNone(i8*)

define i8* @_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx(i8* %py_closure, i8* %py_args, i8* %py_kws) {
entry:
  %.5 = alloca i8*, align 8
  %.6 = call i32 (i8*, i8*, i64, i64, ...) @PyArg_UnpackTuple(i8* %py_args, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.const.reallyreallycoolfunction, i32 0, i32 0), i64 1, i64 1, i8** %.5)
  %.7 = icmp eq i32 %.6, 0
  %.37 = alloca { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, align 8
  %.fca.0.gep1 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 0
  store i32 0, i32* %.fca.0.gep1, align 8
  %.fca.1.0.gep2 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 1, i32 0
  store i64 0, i64* %.fca.1.0.gep2, align 8
  %.fca.2.0.0.gep3 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %.fca.2.0.0.gep3, align 8
  %.fca.2.1.0.gep4 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 1, i32 0
  store i64 0, i64* %.fca.2.1.0.gep4, align 8
  %.fca.2.2.gep5 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 2
  store i8 0, i8* %.fca.2.2.gep5, align 8
  %.fca.2.3.gep6 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 3
  store i64 0, i64* %.fca.2.3.gep6, align 8
  %.fca.2.4.gep7 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 4
  store i64 0, i64* %.fca.2.4.gep7, align 8
  %.fca.2.5.gep8 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 5
  store i64 0, i64* %.fca.2.5.gep8, align 8
  %.fca.2.6.gep9 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 6
  store i64 0, i64* %.fca.2.6.gep9, align 8
  %.fca.2.7.gep10 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i32 0, i32 2, i32 7
  store i64 0, i64* %.fca.2.7.gep10, align 8
  %excinfo = alloca { i8*, i32, i8*, i8*, i32 }*, align 8
  store { i8*, i32, i8*, i8*, i32 }* null, { i8*, i32, i8*, i8*, i32 }** %excinfo, align 8
  %.52 = alloca { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, align 8
  %.fca.0.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 0
  store i32 0, i32* %.fca.0.gep, align 8
  %.fca.1.0.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 1, i32 0
  store i64 0, i64* %.fca.1.0.gep, align 8
  %.fca.2.0.0.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 0, i32 0
  store i64 0, i64* %.fca.2.0.0.gep, align 8
  %.fca.2.1.0.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 1, i32 0
  store i64 0, i64* %.fca.2.1.0.gep, align 8
  %.fca.2.2.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 2
  store i8 0, i8* %.fca.2.2.gep, align 8
  %.fca.2.3.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 3
  store i64 0, i64* %.fca.2.3.gep, align 8
  %.fca.2.4.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 4
  store i64 0, i64* %.fca.2.4.gep, align 8
  %.fca.2.5.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 5
  store i64 0, i64* %.fca.2.5.gep, align 8
  %.fca.2.6.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 6
  store i64 0, i64* %.fca.2.6.gep, align 8
  %.fca.2.7.gep = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52, i32 0, i32 2, i32 7
  store i64 0, i64* %.fca.2.7.gep, align 8
  br i1 %.7, label %common.ret, label %entry.endif, !prof !0

common.ret:                                       ; preds = %entry.endif.endif.endif.endif.endif.endif, %entry.endif.endif.endif.endif.endif.if.endif, %entry.endif.endif.endif.endif.endif.if.endif.if, %entry.endif.endif.endif.endif.endif.endif.if, %entry.endif.endif.endif.endif.endif.endif.endif.endif, %entry.endif.endif.endif, %entry, %entry.endif.endif.endif.endif.endif.if.if.if, %entry.endif.endif.endif.endif.if.endif, %entry.endif.endif.endif.endif.if.if, %entry.endif.if
  %common.ret.op = phi i8* [ null, %entry.endif.if ], [ @_Py_NoneStruct, %entry.endif.endif.endif.endif.if.if ], [ %.61, %entry.endif.endif.endif.endif.if.endif ], [ null, %entry.endif.endif.endif.endif.endif.if.if.if ], [ null, %entry ], [ null, %entry.endif.endif.endif ], [ null, %entry.endif.endif.endif.endif.endif.endif.endif.endif ], [ null, %entry.endif.endif.endif.endif.endif.endif.if ], [ null, %entry.endif.endif.endif.endif.endif.if.endif.if ], [ null, %entry.endif.endif.endif.endif.endif.if.endif ], [ null, %entry.endif.endif.endif.endif.endif.endif ]
  ret i8* %common.ret.op

entry.endif:                                      ; preds = %entry
  %.11 = load i8*, i8** @_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, align 8
  %.12 = ptrtoint i8* %.11 to i64
  %.13 = add i64 %.12, 16
  %.14 = inttoptr i64 %.13 to i8*
  %.16 = icmp eq i8* null, %.11
  br i1 %.16, label %entry.endif.if, label %entry.endif.endif, !prof !0

entry.endif.if:                                   ; preds = %entry.endif
  call void @PyErr_SetString(i8* @PyExc_RuntimeError, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1", i32 0, i32 0))
  br label %common.ret

entry.endif.endif:                                ; preds = %entry.endif
  %.20 = load i8*, i8** %.5, align 8
  %.23 = call i8* @PyNumber_Long(i8* %.20)
  %.24 = icmp ne i8* null, %.23
  br i1 %.24, label %entry.endif.endif.if, label %entry.endif.endif.endif, !prof !1

entry.endif.endif.if:                             ; preds = %entry.endif.endif
  %.26 = call i64 @PyLong_AsLongLong(i8* %.23)
  call void @Py_DecRef(i8* %.23)
  br label %entry.endif.endif.endif

entry.endif.endif.endif:                          ; preds = %entry.endif.endif.if, %entry.endif.endif
  %.21.0 = phi i64 [ %.26, %entry.endif.endif.if ], [ 0, %entry.endif.endif ]
  %.31 = call i8* @PyErr_Occurred()
  %.32 = icmp ne i8* null, %.31
  br i1 %.32, label %common.ret, label %entry.endif.endif.endif.endif, !prof !0

entry.endif.endif.endif.endif:                    ; preds = %entry.endif.endif.endif
  %.36 = call i8* @PyEval_SaveThread()
  store i32 0, i32* %.fca.0.gep1, align 8
  store i64 0, i64* %.fca.1.0.gep2, align 8
  store i64 0, i64* %.fca.2.0.0.gep3, align 8
  store i64 0, i64* %.fca.2.1.0.gep4, align 8
  store i8 0, i8* %.fca.2.2.gep5, align 8
  store i64 0, i64* %.fca.2.3.gep6, align 8
  store i64 0, i64* %.fca.2.4.gep7, align 8
  store i64 0, i64* %.fca.2.5.gep8, align 8
  store i64 0, i64* %.fca.2.6.gep9, align 8
  store i64 0, i64* %.fca.2.7.gep10, align 8
  %.41 = call i32 @_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, { i8*, i32, i8*, i8*, i32 }** %excinfo, i64 %.21.0) #0
  %.42 = load { i8*, i32, i8*, i8*, i32 }*, { i8*, i32, i8*, i8*, i32 }** %excinfo, align 8
  %.43 = icmp eq i32 %.41, 0
  %.44 = icmp eq i32 %.41, -2
  %.47 = or i1 %.43, %.44
  %.49 = icmp sge i32 %.41, 1
  %.50 = select i1 %.49, { i8*, i32, i8*, i8*, i32 }* %.42, { i8*, i32, i8*, i8*, i32 }* undef
  %.51.fca.0.load = load i32, i32* %.fca.0.gep1, align 8
  %.51.fca.0.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } poison, i32 %.51.fca.0.load, 0
  %.51.fca.1.0.load = load i64, i64* %.fca.1.0.gep2, align 8
  %.51.fca.1.0.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.0.insert, i64 %.51.fca.1.0.load, 1, 0
  %.51.fca.2.0.0.load = load i64, i64* %.fca.2.0.0.gep3, align 8
  %.51.fca.2.0.0.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.1.0.insert, i64 %.51.fca.2.0.0.load, 2, 0, 0
  %.51.fca.2.1.0.load = load i64, i64* %.fca.2.1.0.gep4, align 8
  %.51.fca.2.1.0.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.0.0.insert, i64 %.51.fca.2.1.0.load, 2, 1, 0
  %.51.fca.2.2.load = load i8, i8* %.fca.2.2.gep5, align 8
  %.51.fca.2.2.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.1.0.insert, i8 %.51.fca.2.2.load, 2, 2
  %.51.fca.2.3.load = load i64, i64* %.fca.2.3.gep6, align 8
  %.51.fca.2.3.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.2.insert, i64 %.51.fca.2.3.load, 2, 3
  %.51.fca.2.4.load = load i64, i64* %.fca.2.4.gep7, align 8
  %.51.fca.2.4.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.3.insert, i64 %.51.fca.2.4.load, 2, 4
  %.51.fca.2.5.load = load i64, i64* %.fca.2.5.gep8, align 8
  %.51.fca.2.5.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.4.insert, i64 %.51.fca.2.5.load, 2, 5
  %.51.fca.2.6.load = load i64, i64* %.fca.2.6.gep9, align 8
  %.51.fca.2.6.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.5.insert, i64 %.51.fca.2.6.load, 2, 6
  %.51.fca.2.7.load = load i64, i64* %.fca.2.7.gep10, align 8
  %.51.fca.2.7.insert = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.51.fca.2.6.insert, i64 %.51.fca.2.7.load, 2, 7
  store i32 %.51.fca.0.load, i32* %.fca.0.gep, align 8
  store i64 %.51.fca.1.0.load, i64* %.fca.1.0.gep, align 8
  store i64 %.51.fca.2.0.0.load, i64* %.fca.2.0.0.gep, align 8
  store i64 %.51.fca.2.1.0.load, i64* %.fca.2.1.0.gep, align 8
  store i8 %.51.fca.2.2.load, i8* %.fca.2.2.gep, align 8
  store i64 %.51.fca.2.3.load, i64* %.fca.2.3.gep, align 8
  store i64 %.51.fca.2.4.load, i64* %.fca.2.4.gep, align 8
  store i64 %.51.fca.2.5.load, i64* %.fca.2.5.gep, align 8
  store i64 %.51.fca.2.6.load, i64* %.fca.2.6.gep, align 8
  store i64 %.51.fca.2.7.load, i64* %.fca.2.7.gep, align 8
  call void @PyEval_RestoreThread(i8* %.36)
  switch i32 %.41, label %entry.endif.endif.endif.endif.endif [
    i32 -2, label %entry.endif.endif.endif.endif.if
    i32 0, label %entry.endif.endif.endif.endif.if
  ]

entry.endif.endif.endif.endif.if:                 ; preds = %entry.endif.endif.endif.endif, %entry.endif.endif.endif.endif
  br i1 %.44, label %entry.endif.endif.endif.endif.if.if, label %entry.endif.endif.endif.endif.if.endif

entry.endif.endif.endif.endif.endif:              ; preds = %entry.endif.endif.endif.endif
  br i1 %.49, label %entry.endif.endif.endif.endif.endif.if, label %entry.endif.endif.endif.endif.endif.endif

entry.endif.endif.endif.endif.if.if:              ; preds = %entry.endif.endif.endif.endif.if
  call void @Py_IncRef(i8* @_Py_NoneStruct)
  br label %common.ret

entry.endif.endif.endif.endif.if.endif:           ; preds = %entry.endif.endif.endif.endif.if
  %.60 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %.61 = call i8* @numba_make_generator(i64 80, i8* %.60, i8* (i8*, i8*, i8*)* @_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, void (i8*)* bitcast (void ({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }*)* @finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29 to void (i8*)*), i8* %.11)
  br label %common.ret

entry.endif.endif.endif.endif.endif.if:           ; preds = %entry.endif.endif.endif.endif.endif
  call void @PyErr_Clear()
  %.66 = load { i8*, i32, i8*, i8*, i32 }, { i8*, i32, i8*, i8*, i32 }* %.50, align 8
  %.67 = extractvalue { i8*, i32, i8*, i8*, i32 } %.66, 4
  %.68 = icmp sgt i32 %.67, 0
  br i1 %.68, label %entry.endif.endif.endif.endif.endif.if.if, label %entry.endif.endif.endif.endif.endif.if.else

entry.endif.endif.endif.endif.endif.endif:        ; preds = %entry.endif.endif.endif.endif.endif
  switch i32 %.41, label %entry.endif.endif.endif.endif.endif.endif.endif.endif [
    i32 -3, label %entry.endif.endif.endif.endif.endif.endif.if
    i32 -1, label %common.ret
  ]

entry.endif.endif.endif.endif.endif.if.if:        ; preds = %entry.endif.endif.endif.endif.endif.if
  %.71 = extractvalue { i8*, i32, i8*, i8*, i32 } %.66, 0
  %.73 = extractvalue { i8*, i32, i8*, i8*, i32 } %.66, 1
  %.74 = sext i32 %.73 to i64
  %.75 = call i8* @PyBytes_FromStringAndSize(i8* %.71, i64 %.74)
  %.76 = load { i8*, i32, i8*, i8*, i32 }, { i8*, i32, i8*, i8*, i32 }* %.50, align 8
  %.77 = extractvalue { i8*, i32, i8*, i8*, i32 } %.76, 2
  %.79 = extractvalue { i8*, i32, i8*, i8*, i32 } %.76, 3
  %.80 = bitcast i8* %.79 to i8* (i8*)*
  %.81 = call i8* %.80(i8* %.77)
  %.82 = icmp eq i8* null, %.81
  br i1 %.82, label %entry.endif.endif.endif.endif.endif.if.if.if, label %entry.endif.endif.endif.endif.endif.if.if.endif, !prof !0

entry.endif.endif.endif.endif.endif.if.else:      ; preds = %entry.endif.endif.endif.endif.endif.if
  %.91 = extractvalue { i8*, i32, i8*, i8*, i32 } %.66, 0
  %.93 = extractvalue { i8*, i32, i8*, i8*, i32 } %.66, 1
  %.95 = extractvalue { i8*, i32, i8*, i8*, i32 } %.66, 2
  %.96 = call i8* @numba_unpickle(i8* %.91, i32 %.93, i8* %.95)
  br label %entry.endif.endif.endif.endif.endif.if.endif

entry.endif.endif.endif.endif.endif.if.endif:     ; preds = %entry.endif.endif.endif.endif.endif.if.if.endif, %entry.endif.endif.endif.endif.endif.if.else
  %.98 = phi i8* [ %.86, %entry.endif.endif.endif.endif.endif.if.if.endif ], [ %.96, %entry.endif.endif.endif.endif.endif.if.else ]
  %.99 = icmp ne i8* null, %.98
  br i1 %.99, label %entry.endif.endif.endif.endif.endif.if.endif.if, label %common.ret, !prof !1

entry.endif.endif.endif.endif.endif.if.if.if:     ; preds = %entry.endif.endif.endif.endif.endif.if.if
  call void @PyErr_SetString(i8* @PyExc_RuntimeError, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @".const.Error creating Python tuple from runtime exception arguments.2", i32 0, i32 0))
  br label %common.ret

entry.endif.endif.endif.endif.endif.if.if.endif:  ; preds = %entry.endif.endif.endif.endif.endif.if.if
  %.86 = call i8* @numba_runtime_build_excinfo_struct(i8* %.75, i8* %.81)
  %.87 = bitcast { i8*, i32, i8*, i8*, i32 }* %.50 to i8*
  call void @NRT_Free(i8* %.87)
  br label %entry.endif.endif.endif.endif.endif.if.endif

entry.endif.endif.endif.endif.endif.if.endif.if:  ; preds = %entry.endif.endif.endif.endif.endif.if.endif
  call void @numba_do_raise(i8* %.98)
  br label %common.ret

entry.endif.endif.endif.endif.endif.endif.if:     ; preds = %entry.endif.endif.endif.endif.endif.endif
  call void @PyErr_SetNone(i8* @PyExc_StopIteration)
  br label %common.ret

entry.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %entry.endif.endif.endif.endif.endif.endif
  call void @PyErr_SetString(i8* @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function.3", i32 0, i32 0))
  br label %common.ret
}

declare i8* @PyNumber_Long(i8*)

declare i64 @PyLong_AsLongLong(i8*)

declare void @Py_DecRef(i8*)

declare i8* @PyErr_Occurred()

declare i8* @numba_make_generator(i64, i8*, i8* (i8*, i8*, i8*)*, void (i8*)*, i8*)

attributes #0 = { noinline }

!0 = !{!"branch_weights", i32 1, i32 99}
!1 = !{!"branch_weights", i32 99, i32 1}

================================================================================
================================================================================
--------------------OPTIMIZED DUMP reallyreallycoolfunction---------------------
; ModuleID = 'reallyreallycoolfunction'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.const.reallyreallycoolfunction.next = internal constant [30 x i8] c"reallyreallycoolfunction.next\00"
@".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx" = internal constant [119 x i8] c"missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx\00"
@".const.unknown error when calling native function" = internal constant [43 x i8] c"unknown error when calling native function\00"
@.const.reallyreallycoolfunction = internal constant [25 x i8] c"reallyreallycoolfunction\00"
@_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx = common local_unnamed_addr global i8* null
@PyExc_RuntimeError = external global i8
@".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1" = internal constant [119 x i8] c"missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx\00"
@_Py_NoneStruct = external global i8
@PyExc_StopIteration = external global i8
@PyExc_SystemError = external global i8

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn writeonly
define i32 @_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* noalias nocapture writeonly %retptr, { i8*, i32, i8*, i8*, i32 }** noalias nocapture readnone %excinfo, i64 %arg.n) local_unnamed_addr #0 {
entry:
  %.5 = insertvalue { i64 } undef, i64 %arg.n, 0
  %.7 = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } { i32 0, { i64 } undef, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } undef }, { i64 } %.5, 1
  %.8 = insertvalue { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.7, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } zeroinitializer, 2
  store { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } } %.8, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %retptr, align 8
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define i32 @_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29([1 x i64]* noalias nocapture writeonly %retptr, { i8*, i32, i8*, i8*, i32 }** noalias nocapture readnone %excinfo, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* nocapture %arg.gen) local_unnamed_addr #1 {
entry:
  %gen.resume_index1 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen to i32*
  %.299 = load i32, i32* %gen.resume_index1, align 4
  switch i32 %.299, label %common.ret [
    i32 1, label %generator_resume1
    i32 2, label %generator_resume2.endif
    i32 0, label %B0
  ]

common.ret:                                       ; preds = %entry, %B88, %B84, %B36, %B0
  %common.ret.op = phi i32 [ 0, %B0 ], [ 0, %B36 ], [ -3, %B84 ], [ -3, %B88 ], [ -3, %entry ]
  ret i32 %common.ret.op

B0:                                               ; preds = %entry
  %0 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen to i32*
  %.6 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 1, i32 0
  %.7 = load i64, i64* %.6, align 8
  %.31 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 3
  store i64 123456789, i64* %.31, align 8
  %.34 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 7
  store i64 %.7, i64* %.34, align 8
  store i32 1, i32* %0, align 4
  %1 = bitcast [1 x i64]* %retptr to i64*
  store i64 123456789, i64* %1, align 8
  br label %common.ret

B36:                                              ; preds = %generator_resume2.endif, %generator_resume1
  %n.0 = phi i64 [ %.209, %generator_resume2.endif ], [ %.48, %generator_resume1 ]
  %catt.2.0 = phi i64 [ %.221, %generator_resume2.endif ], [ 0, %generator_resume1 ]
  %countt.2.0 = phi i64 [ %.213, %generator_resume2.endif ], [ 1, %generator_resume1 ]
  %"$82pred.0" = phi i8 [ 1, %generator_resume2.endif ], [ 0, %generator_resume1 ]
  %2 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen to i32*
  %betaa.2.0.in = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 3
  %betaa.2.0 = load i64, i64* %betaa.2.0.in, align 8
  %.103 = add nsw i64 %countt.2.0, 1
  %.138 = add i64 %catt.2.0, 1641
  %.151 = add i64 %.138, %betaa.2.0
  %.171 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 2
  store i8 %"$82pred.0", i8* %.171, align 1
  %.176 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 7
  store i64 %n.0, i64* %.176, align 8
  %.179 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 6
  store i64 %.103, i64* %.179, align 8
  %.182 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 5
  store i64 %.103, i64* %.182, align 8
  %.185 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 4
  store i64 %.151, i64* %.185, align 8
  store i64 %catt.2.0, i64* %betaa.2.0.in, align 8
  store i32 2, i32* %2, align 4
  %3 = bitcast [1 x i64]* %retptr to i64*
  store i64 %.151, i64* %3, align 8
  br label %common.ret

B84:                                              ; preds = %generator_resume2.endif
  %4 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen to i32*
  store i32 -1, i32* %4, align 4
  br label %common.ret

B88:                                              ; preds = %generator_resume1
  %5 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen to i32*
  store i32 -1, i32* %5, align 4
  br label %common.ret

generator_resume1:                                ; preds = %entry
  %.47 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 7
  %.48 = load i64, i64* %.47, align 8
  %.77 = icmp sgt i64 %.48, 1
  br i1 %.77, label %B36, label %B88

generator_resume2.endif:                          ; preds = %entry
  %.208 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 7
  %.209 = load i64, i64* %.208, align 8
  %.212 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 6
  %.213 = load i64, i64* %.212, align 8
  %.216 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 5
  %.217 = load i64, i64* %.216, align 8
  %.220 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %arg.gen, i64 0, i32 2, i32 4
  %.221 = load i64, i64* %.220, align 8
  %.238 = icmp slt i64 %.217, %.209
  br i1 %.238, label %B36, label %B84
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define void @finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* nocapture %.1) #2 {
entry:
  ret void
}

define i8* @_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29(i8* nocapture readnone %py_closure, i8* %py_args, i8* nocapture readnone %py_kws) {
entry:
  %.5 = alloca i8*, align 8
  %.6 = call i32 (i8*, i8*, i64, i64, ...) @PyArg_UnpackTuple(i8* %py_args, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.const.reallyreallycoolfunction.next, i64 0, i64 0), i64 1, i64 1, i8** nonnull %.5)
  %.7 = icmp eq i32 %.6, 0
  %.28 = alloca [1 x i64], align 8
  br i1 %.7, label %common.ret, label %entry.endif, !prof !0

common.ret:                                       ; preds = %entry.endif.endif, %entry.endif.endif.endif.endif.endif.if, %entry.endif.endif.endif.endif.endif.endif.endif, %entry, %entry.endif.endif.endif.if.endif, %entry.endif.endif.endif.if.if, %entry.endif.if
  %common.ret.op = phi i8* [ null, %entry.endif.if ], [ @_Py_NoneStruct, %entry.endif.endif.endif.if.if ], [ %.48, %entry.endif.endif.endif.if.endif ], [ null, %entry ], [ null, %entry.endif.endif.endif.endif.endif.endif.endif ], [ null, %entry.endif.endif.endif.endif.endif.if ], [ null, %entry.endif.endif ]
  ret i8* %common.ret.op

entry.endif:                                      ; preds = %entry
  %.11 = load i8*, i8** @_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, align 8
  %.16 = icmp eq i8* %.11, null
  br i1 %.16, label %entry.endif.if, label %entry.endif.endif, !prof !0

entry.endif.if:                                   ; preds = %entry.endif
  call void @PyErr_SetString(i8* nonnull @PyExc_RuntimeError, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx", i64 0, i64 0))
  br label %common.ret

entry.endif.endif:                                ; preds = %entry.endif
  %0 = bitcast [1 x i64]* %.28 to i64*
  %.20 = load i8*, i8** %.5, align 8
  %.21 = ptrtoint i8* %.20 to i64
  %.22 = add i64 %.21, 56
  %.23 = inttoptr i64 %.22 to { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }*
  %.27 = call i8* @PyEval_SaveThread()
  store i64 0, i64* %0, align 8
  %.32 = call i32 @_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29([1 x i64]* nonnull %.28, { i8*, i32, i8*, i8*, i32 }** nonnull undef, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.23) #4
  %.42.fca.0.load = load i64, i64* %0, align 8
  call void @PyEval_RestoreThread(i8* %.27)
  switch i32 %.32, label %entry.endif.endif.endif.endif.endif.endif.endif [
    i32 -2, label %entry.endif.endif.endif.if.if
    i32 0, label %entry.endif.endif.endif.if.endif
    i32 -3, label %entry.endif.endif.endif.endif.endif.if
    i32 -1, label %common.ret
  ]

entry.endif.endif.endif.if.if:                    ; preds = %entry.endif.endif
  call void @Py_IncRef(i8* nonnull @_Py_NoneStruct)
  br label %common.ret

entry.endif.endif.endif.if.endif:                 ; preds = %entry.endif.endif
  %.48 = call i8* @PyTuple_New(i32 1)
  %.52 = call i8* @PyLong_FromLongLong(i64 %.42.fca.0.load)
  %.55 = call i32 @PyTuple_SetItem(i8* %.48, i32 0, i8* %.52)
  br label %common.ret

entry.endif.endif.endif.endif.endif.if:           ; preds = %entry.endif.endif
  call void @PyErr_SetNone(i8* nonnull @PyExc_StopIteration)
  br label %common.ret

entry.endif.endif.endif.endif.endif.endif.endif:  ; preds = %entry.endif.endif
  call void @PyErr_SetString(i8* nonnull @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function", i64 0, i64 0))
  br label %common.ret
}

declare i32 @PyArg_UnpackTuple(i8*, i8*, i64, i64, ...) local_unnamed_addr

declare void @PyErr_SetString(i8*, i8*) local_unnamed_addr

declare i8* @PyEval_SaveThread() local_unnamed_addr

declare void @PyEval_RestoreThread(i8*) local_unnamed_addr

declare void @Py_IncRef(i8*) local_unnamed_addr

declare i8* @PyTuple_New(i32) local_unnamed_addr

declare i8* @PyLong_FromLongLong(i64) local_unnamed_addr

declare i32 @PyTuple_SetItem(i8*, i32, i8*) local_unnamed_addr

declare void @PyErr_SetNone(i8*) local_unnamed_addr

define i8* @_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx(i8* nocapture readnone %py_closure, i8* %py_args, i8* nocapture readnone %py_kws) local_unnamed_addr {
entry:
  %.5 = alloca i8*, align 8
  %.6 = call i32 (i8*, i8*, i64, i64, ...) @PyArg_UnpackTuple(i8* %py_args, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.const.reallyreallycoolfunction, i64 0, i64 0), i64 1, i64 1, i8** nonnull %.5)
  %.7 = icmp eq i32 %.6, 0
  %.37 = alloca { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, align 8
  %.fca.1.0.gep2 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i64 0, i32 1, i32 0
  %.fca.2.3.gep6 = getelementptr inbounds { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37, i64 0, i32 2, i32 3
  %.52 = alloca { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }, align 8
  br i1 %.7, label %common.ret, label %entry.endif, !prof !0

common.ret:                                       ; preds = %entry.endif.endif.endif, %entry, %entry.endif.endif.endif.endif, %entry.endif.if
  %common.ret.op = phi i8* [ null, %entry.endif.if ], [ %.61, %entry.endif.endif.endif.endif ], [ null, %entry ], [ null, %entry.endif.endif.endif ]
  ret i8* %common.ret.op

entry.endif:                                      ; preds = %entry
  %.11 = load i8*, i8** @_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, align 8
  %.16 = icmp eq i8* %.11, null
  br i1 %.16, label %entry.endif.if, label %entry.endif.endif, !prof !0

entry.endif.if:                                   ; preds = %entry.endif
  call void @PyErr_SetString(i8* nonnull @PyExc_RuntimeError, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1", i64 0, i64 0))
  br label %common.ret

entry.endif.endif:                                ; preds = %entry.endif
  %.20 = load i8*, i8** %.5, align 8
  %.23 = call i8* @PyNumber_Long(i8* %.20)
  %.24.not = icmp eq i8* %.23, null
  br i1 %.24.not, label %entry.endif.endif.endif, label %entry.endif.endif.if, !prof !0

entry.endif.endif.if:                             ; preds = %entry.endif.endif
  %.26 = call i64 @PyLong_AsLongLong(i8* nonnull %.23)
  call void @Py_DecRef(i8* nonnull %.23)
  br label %entry.endif.endif.endif

entry.endif.endif.endif:                          ; preds = %entry.endif.endif.if, %entry.endif.endif
  %.21.0 = phi i64 [ %.26, %entry.endif.endif.if ], [ 0, %entry.endif.endif ]
  %.31 = call i8* @PyErr_Occurred()
  %.32.not = icmp eq i8* %.31, null
  br i1 %.32.not, label %entry.endif.endif.endif.endif, label %common.ret, !prof !1

entry.endif.endif.endif.endif:                    ; preds = %entry.endif.endif.endif
  %0 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i32*
  %1 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i32*
  %.36 = call i8* @PyEval_SaveThread()
  store i32 0, i32* %1, align 8
  %2 = bitcast i64* %.fca.1.0.gep2 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(25) %2, i8 0, i64 25, i1 false)
  %3 = bitcast i64* %.fca.2.3.gep6 to i8*
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(40) %3, i8 0, i64 40, i1 false)
  %.41 = call i32 @_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* nonnull %.37, { i8*, i32, i8*, i8*, i32 }** nonnull undef, i64 %.21.0) #4
  %.51.fca.0.load = load i32, i32* %1, align 8
  %4 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr = getelementptr inbounds i8, i8* %4, i64 8
  %5 = bitcast i8* %sunkaddr to i64*
  %.51.fca.1.0.load = load i64, i64* %5, align 8
  %6 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr3 = getelementptr inbounds i8, i8* %6, i64 16
  %7 = bitcast i8* %sunkaddr3 to i64*
  %.51.fca.2.0.0.load = load i64, i64* %7, align 8
  %8 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr4 = getelementptr inbounds i8, i8* %8, i64 24
  %9 = bitcast i8* %sunkaddr4 to i64*
  %.51.fca.2.1.0.load = load i64, i64* %9, align 8
  %10 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr5 = getelementptr inbounds i8, i8* %10, i64 32
  %.51.fca.2.2.load = load i8, i8* %sunkaddr5, align 8
  %11 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr6 = getelementptr inbounds i8, i8* %11, i64 40
  %12 = bitcast i8* %sunkaddr6 to i64*
  %.51.fca.2.3.load = load i64, i64* %12, align 8
  %13 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr7 = getelementptr inbounds i8, i8* %13, i64 48
  %14 = bitcast i8* %sunkaddr7 to i64*
  %.51.fca.2.4.load = load i64, i64* %14, align 8
  %15 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr8 = getelementptr inbounds i8, i8* %15, i64 56
  %16 = bitcast i8* %sunkaddr8 to i64*
  %.51.fca.2.5.load = load i64, i64* %16, align 8
  %17 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr9 = getelementptr inbounds i8, i8* %17, i64 64
  %18 = bitcast i8* %sunkaddr9 to i64*
  %.51.fca.2.6.load = load i64, i64* %18, align 8
  %19 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.37 to i8*
  %sunkaddr10 = getelementptr inbounds i8, i8* %19, i64 72
  %20 = bitcast i8* %sunkaddr10 to i64*
  %.51.fca.2.7.load = load i64, i64* %20, align 8
  store i32 %.51.fca.0.load, i32* %0, align 8
  %21 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr11 = getelementptr inbounds i8, i8* %21, i64 8
  %22 = bitcast i8* %sunkaddr11 to i64*
  store i64 %.51.fca.1.0.load, i64* %22, align 8
  %23 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr12 = getelementptr inbounds i8, i8* %23, i64 16
  %24 = bitcast i8* %sunkaddr12 to i64*
  store i64 %.51.fca.2.0.0.load, i64* %24, align 8
  %25 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr13 = getelementptr inbounds i8, i8* %25, i64 24
  %26 = bitcast i8* %sunkaddr13 to i64*
  store i64 %.51.fca.2.1.0.load, i64* %26, align 8
  %27 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr14 = getelementptr inbounds i8, i8* %27, i64 32
  store i8 %.51.fca.2.2.load, i8* %sunkaddr14, align 8
  %28 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr15 = getelementptr inbounds i8, i8* %28, i64 40
  %29 = bitcast i8* %sunkaddr15 to i64*
  store i64 %.51.fca.2.3.load, i64* %29, align 8
  %30 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr16 = getelementptr inbounds i8, i8* %30, i64 48
  %31 = bitcast i8* %sunkaddr16 to i64*
  store i64 %.51.fca.2.4.load, i64* %31, align 8
  %32 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr17 = getelementptr inbounds i8, i8* %32, i64 56
  %33 = bitcast i8* %sunkaddr17 to i64*
  store i64 %.51.fca.2.5.load, i64* %33, align 8
  %34 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr18 = getelementptr inbounds i8, i8* %34, i64 64
  %35 = bitcast i8* %sunkaddr18 to i64*
  store i64 %.51.fca.2.6.load, i64* %35, align 8
  %36 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %sunkaddr19 = getelementptr inbounds i8, i8* %36, i64 72
  %37 = bitcast i8* %sunkaddr19 to i64*
  store i64 %.51.fca.2.7.load, i64* %37, align 8
  call void @PyEval_RestoreThread(i8* %.36)
  %.60 = bitcast { i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }* %.52 to i8*
  %.61 = call i8* @numba_make_generator(i64 80, i8* nonnull %.60, i8* (i8*, i8*, i8*)* nonnull @_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, void (i8*)* bitcast (void ({ i32, { i64 }, { [1 x i64], [1 x i64], i8, i64, i64, i64, i64, i64 } }*)* @finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29 to void (i8*)*), i8* nonnull %.11)
  br label %common.ret
}

declare i8* @PyNumber_Long(i8*) local_unnamed_addr

declare i64 @PyLong_AsLongLong(i8*) local_unnamed_addr

declare void @Py_DecRef(i8*) local_unnamed_addr

declare i8* @PyErr_Occurred() local_unnamed_addr

declare i8* @numba_make_generator(i64, i8*, i8* (i8*, i8*, i8*)*, void (i8*)*, i8*) local_unnamed_addr

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn writeonly }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn }
attributes #2 = { mustprogress nofree norecurse nosync nounwind readnone willreturn }
attributes #3 = { argmemonly nofree nounwind willreturn writeonly }
attributes #4 = { noinline }

!0 = !{!"branch_weights", i32 1, i32 99}
!1 = !{!"branch_weights", i32 99, i32 1}

================================================================================
================================================================================
-----------------------ASSEMBLY reallyreallycoolfunction------------------------
	.text
	.file	"<string>"
	.globl	_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx
	.p2align	4, 0x90
	.type	_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx,@function
_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx:
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, 40(%rdi)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, 16(%rdi)
	movq	%rdx, 8(%rdi)
	movq	$0, 72(%rdi)
	movb	$0, 32(%rdi)
	movl	$0, (%rdi)
	xorl	%eax, %eax
	vzeroupper
	retq
.Lfunc_end0:
	.size	_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, .Lfunc_end0-_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx

	.globl	_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29
	.p2align	4, 0x90
	.type	_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29,@function
_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29:
	movl	(%rdx), %ecx
	testl	%ecx, %ecx
	je	.LBB1_5
	movl	$-3, %eax
	cmpl	$1, %ecx
	je	.LBB1_6
	cmpl	$2, %ecx
	jne	.LBB1_10
	movq	72(%rdx), %rcx
	cmpq	%rcx, 56(%rdx)
	jge	.LBB1_9
	movq	64(%rdx), %rsi
	movq	48(%rdx), %r9
	movb	$1, %r8b
	jmp	.LBB1_8
.LBB1_5:
	movq	8(%rdx), %rax
	movq	$123456789, 40(%rdx)
	movq	%rax, 72(%rdx)
	movl	$1, (%rdx)
	movq	$123456789, (%rdi)
	xorl	%eax, %eax
	retq
.LBB1_6:
	movq	72(%rdx), %rcx
	cmpq	$1, %rcx
	jle	.LBB1_9
	movl	$1, %esi
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
.LBB1_8:
	movq	40(%rdx), %rax
	incq	%rsi
	addq	%r9, %rax
	addq	$1641, %rax
	movb	%r8b, 32(%rdx)
	movq	%rcx, 72(%rdx)
	movq	%rsi, 64(%rdx)
	movq	%rsi, 56(%rdx)
	movq	%rax, 48(%rdx)
	movq	%r9, 40(%rdx)
	movl	$2, (%rdx)
	movq	%rax, (%rdi)
	xorl	%eax, %eax
	retq
.LBB1_9:
	movl	$-1, (%rdx)
.LBB1_10:
	retq
.Lfunc_end1:
	.size	_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, .Lfunc_end1-_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29

	.globl	finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29
	.p2align	4, 0x90
	.type	finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29,@function
finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29:
	retq
.Lfunc_end2:
	.size	finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, .Lfunc_end2-finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29

	.globl	_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29
	.p2align	4, 0x90
	.type	_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29,@function
_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rdi
	movabsq	$.const.reallyreallycoolfunction.next, %rsi
	movabsq	$PyArg_UnpackTuple, %rbx
	xorl	%r15d, %r15d
	leaq	8(%rsp), %r8
	movl	$1, %edx
	movl	$1, %ecx
	xorl	%eax, %eax
	callq	*%rbx
	testl	%eax, %eax
	je	.LBB3_10
	movabsq	$_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, %rax
	cmpq	$0, (%rax)
	je	.LBB3_2
	movq	8(%rsp), %rbx
	addq	$56, %rbx
	movabsq	$PyEval_SaveThread, %rax
	callq	*%rax
	movq	%rax, %r15
	movq	$0, (%rsp)
	movabsq	$_ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, %rax
	movq	%rsp, %rdi
	movq	%rbx, %rdx
	callq	*%rax
	movl	%eax, %ebx
	movq	(%rsp), %r14
	movabsq	$PyEval_RestoreThread, %rax
	movq	%r15, %rdi
	callq	*%rax
	addl	$3, %ebx
	cmpl	$3, %ebx
	ja	.LBB3_8
	xorl	%r15d, %r15d
	movabsq	$.LJTI3_0, %rax
	jmpq	*(%rax,%rbx,8)
.LBB3_7:
	movabsq	$PyExc_StopIteration, %rdi
	movabsq	$PyErr_SetNone, %rax
	callq	*%rax
	xorl	%r15d, %r15d
	jmp	.LBB3_10
.LBB3_8:
	movabsq	$PyExc_SystemError, %rdi
	movabsq	$".const.unknown error when calling native function", %rsi
.LBB3_3:
	movabsq	$PyErr_SetString, %rax
	callq	*%rax
	xorl	%r15d, %r15d
	jmp	.LBB3_10
.LBB3_9:
	movabsq	$_Py_NoneStruct, %r15
	movabsq	$Py_IncRef, %rax
	movq	%r15, %rdi
	callq	*%rax
	jmp	.LBB3_10
.LBB3_6:
	movabsq	$PyTuple_New, %rax
	movl	$1, %edi
	callq	*%rax
	movq	%rax, %r15
	movabsq	$PyLong_FromLongLong, %rax
	movq	%r14, %rdi
	callq	*%rax
	movabsq	$PyTuple_SetItem, %rcx
	movq	%r15, %rdi
	xorl	%esi, %esi
	movq	%rax, %rdx
	callq	*%rcx
.LBB3_10:
	movq	%r15, %rax
	addq	$16, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB3_2:
	.cfi_def_cfa_offset 48
	movabsq	$PyExc_RuntimeError, %rdi
	movabsq	$".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx", %rsi
	jmp	.LBB3_3
.Lfunc_end3:
	.size	_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, .Lfunc_end3-_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI3_0:
	.quad	.LBB3_7
	.quad	.LBB3_9
	.quad	.LBB3_10
	.quad	.LBB3_6

	.text
	.globl	_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx
	.p2align	4, 0x90
	.type	_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx,@function
_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	pushq	%r14
	.cfi_def_cfa_offset 24
	pushq	%r12
	.cfi_def_cfa_offset 32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	subq	$168, %rsp
	.cfi_def_cfa_offset 208
	.cfi_offset %rbx, -40
	.cfi_offset %r12, -32
	.cfi_offset %r14, -24
	.cfi_offset %r15, -16
	movq	%rsi, %rdi
	movabsq	$.const.reallyreallycoolfunction, %rsi
	movabsq	$PyArg_UnpackTuple, %r9
	xorl	%ebx, %ebx
	movq	%rsp, %r8
	movl	$1, %edx
	movl	$1, %ecx
	xorl	%eax, %eax
	callq	*%r9
	testl	%eax, %eax
	je	.LBB4_9
	movabsq	$_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, %rax
	movq	(%rax), %r14
	testq	%r14, %r14
	je	.LBB4_2
	movq	(%rsp), %rdi
	movabsq	$PyNumber_Long, %rax
	callq	*%rax
	testq	%rax, %rax
	je	.LBB4_4
	movq	%rax, %rbx
	movabsq	$PyLong_AsLongLong, %rax
	movq	%rbx, %rdi
	callq	*%rax
	movq	%rax, %r15
	movabsq	$Py_DecRef, %rax
	movq	%rbx, %rdi
	callq	*%rax
	movabsq	$PyErr_Occurred, %rax
	callq	*%rax
	testq	%rax, %rax
	jne	.LBB4_7
.LBB4_8:
	leaq	16(%rsp), %rbx
	movabsq	$PyEval_SaveThread, %rax
	callq	*%rax
	movq	%rax, %r12
	movl	$0, 8(%rsp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%xmm0, (%rbx)
	vmovups	%xmm0, 9(%rbx)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovups	%ymm0, 32(%rbx)
	movq	$0, 64(%rbx)
	movabsq	$_ZN8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, %rax
	leaq	8(%rsp), %rdi
	movq	%r15, %rdx
	vzeroupper
	callq	*%rax
	movl	8(%rsp), %eax
	vmovups	16(%rsp), %xmm0
	movq	32(%rsp), %rcx
	movb	40(%rsp), %dl
	vmovups	48(%rsp), %ymm1
	movl	%eax, 88(%rsp)
	vmovups	%xmm0, 96(%rsp)
	movq	80(%rsp), %rax
	movq	%rcx, 112(%rsp)
	movb	%dl, 120(%rsp)
	vmovups	%ymm1, 128(%rsp)
	movq	%rax, 160(%rsp)
	movabsq	$PyEval_RestoreThread, %rax
	movq	%r12, %rdi
	vzeroupper
	callq	*%rax
	movabsq	$_ZN7cpython8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, %rdx
	movabsq	$finalize__ZN8__main__24reallyreallycoolfunction4nextE168UniTuple_28int64_20x_201_29_20generator_28func_3d_3cfunction_20reallyreallycoolfunction_20at_200x7f7775577010_3e_2c_20args_3d_28int64_2c_29_2c_20has_finalizer_3dTrue_29, %rcx
	movabsq	$numba_make_generator, %rax
	leaq	88(%rsp), %rsi
	movl	$80, %edi
	movq	%r14, %r8
	callq	*%rax
	movq	%rax, %rbx
.LBB4_9:
	movq	%rbx, %rax
	addq	$168, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	retq
.LBB4_2:
	.cfi_def_cfa_offset 208
	movabsq	$PyExc_RuntimeError, %rdi
	movabsq	$".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1", %rsi
	movabsq	$PyErr_SetString, %rax
	callq	*%rax
	xorl	%ebx, %ebx
	jmp	.LBB4_9
.LBB4_4:
	xorl	%r15d, %r15d
	movabsq	$PyErr_Occurred, %rax
	callq	*%rax
	testq	%rax, %rax
	je	.LBB4_8
.LBB4_7:
	xorl	%ebx, %ebx
	jmp	.LBB4_9
.Lfunc_end4:
	.size	_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx, .Lfunc_end4-_ZN7cpython8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx
	.cfi_endproc

	.type	.const.reallyreallycoolfunction.next,@object
	.section	.rodata,"a",@progbits
	.p2align	4
.const.reallyreallycoolfunction.next:
	.asciz	"reallyreallycoolfunction.next"
	.size	.const.reallyreallycoolfunction.next, 30

	.type	".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx",@object
	.p2align	4
".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx":
	.asciz	"missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx"
	.size	".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx", 119

	.type	".const.unknown error when calling native function",@object
	.p2align	4
".const.unknown error when calling native function":
	.asciz	"unknown error when calling native function"
	.size	".const.unknown error when calling native function", 43

	.type	.const.reallyreallycoolfunction,@object
	.p2align	4
.const.reallyreallycoolfunction:
	.asciz	"reallyreallycoolfunction"
	.size	.const.reallyreallycoolfunction, 25

	.type	_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx,@object
	.comm	_ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx,8,8
	.type	".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1",@object
	.p2align	4
".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1":
	.asciz	"missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx"
	.size	".const.missing Environment: _ZN08NumbaEnv8__main__24reallyreallycoolfunctionB2v1B40c8tJTIcFKzyF2ILShI4CrgQElQb6HcpCSitgEU0AEx.1", 119

	.section	".note.GNU-stack","",@progbits

================================================================================
